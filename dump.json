[
  {
    "__docId__": 0,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/collection.js",
    "memberof": null,
    "longname": "src/collection.js",
    "access": null,
    "description": null,
    "lineNumber": 7,
    "content": "/**\n * The Collection object.\n *\n * @example\n * let collection = new Collection([1, 2, 3]);\n */\nexport default class Collection\n{\n    /**\n     * The collection constructor.\n     *\n     * @param  {Array} [items=[]] the array to collect.\n     * @return {Collection} A Collection object.\n     */\n    constructor(items = []) {\n        /**\n         * The internal array.\n         * @type {Array|Object}\n         */\n        this.items = items;\n    }\n\n    /**\n     * Adds an item to the collection.\n     *\n     * @param {*} item the item to be added.\n     * @return {Collection} the collection object.\n     * @example\n     * const collection = new Collection();\n     * collection.add('Arya');\n     * console.log(collection.first()); //outputs 'Arya'\n     */\n    add(item) {\n        this.items.push(item);\n\n        return this;\n    }\n\n    /**\n     * Gets the collected elements in an array.\n     *\n     * @return {Array} the internal array.\n     * @example\n     * const collection = new Collection([1, 2, 3]);\n     * console.log(collection.all()); // [1, 2, 3]\n     */\n    all() {\n        return this.items;\n    }\n\n    /**\n     * Gets the average value of the array or a property or a callback return value.\n     * If no property is provided: it will calculate the average value of the array (Numeric array).\n     * If property is a string: it will calculate the average value of that property for all\n     *  objects in the array.\n     * If Property is a callback: the the averaging will use the value returned instead.\n     *\n     * @param  {function|string} [property=null] The property name or the callback function.\n     * defaults to null.\n     * @return {number} The average value.\n     * @example <caption>Averaging elements</caption>\n     * const collection = new Collection([1, 2, 3]);\n     * console.log(collection.average()); // 2\n     * @example <caption>Averaging a property</caption>\n     * const collection = new Collection([\n     *     { name: 'Arya Stark', age: 9 },\n     *     { name: 'Bran Stark', age: 7 },\n     *     { name: 'Jon Snow', age: 14 }\n     * ]);\n     * console.log(collection.average('age')); // 10\n     * @example <caption>Averaging using a callback</caption>\n     * const collection = new Collection([\n     *     { name: 'Arya Stark', age: 9 },\n     *     { name: 'Bran Stark', age: 7 },\n     *     { name: 'Jon Snow', age: 14 }\n     * ]);\n     * console.log(collection.average(i => i.age)); // 10\n     */\n    average(property = null) {\n        return this.sum(property) / this.count();\n    }\n\n    /**\n     * Chunks the collection into a new collection with equal length arrays as its items.\n     *\n     * @param  {number} size the size of each chunk.\n     * @return {Collection} the new collection.\n     * @example\n     * const collection = new Collection([1, 2, 3, 4, 5]).chunk(2);\n     * console.log(collection.all()); // [[1, 2], [3, 4], [5]]\n     */\n    chunk(size) {\n        if (size <= 0) {\n            return new Collection();\n        }\n\n        const items = [];\n\n        for (let i = 0; i < this.count(); i += size) {\n            items.push(this.items.slice(i, i + size));\n        }\n\n        return new Collection(items);\n    }\n\n    /**\n     * Static constructor. Will transform a string to array of strings.\n     * cool if you don't like using the 'new' keyword.\n     *\n     * @param  {Array|string} collectable the array or the string to wrapped in a collection.\n     * @return {Collection} A collection that wraps the collectable items.\n     * @example\n     * const collection = Collection.collect('abcd');\n     * console.log(collection.all()); // ['a', 'b', 'c', 'd']\n     */\n    static collect(collectable) {\n        let items = collectable;\n        if (typeof collectable === 'string') {\n            items = collectable.split('');\n        }\n\n        return new Collection(items);\n    }\n\n    /**\n     * Concatnates the collection with an array or another collection.\n     *\n     * @param {Array|Collection} collection the array or the collection to be concatenated with.\n     * @return {Collection} concatenated collection.\n     * @example\n     * const collection = new Collection([1, 2, 3]);\n     * const array = [4, 5, 6]; // or another collection.\n     * const newCollection = collection.concat(array);\n     * console.log(newCollection.all()); // [1, 2, 3, 4, 5, 6]\n     */\n    concat(collection) {\n        if (Array.isArray(collection)) {\n            return new Collection(this.items.concat(collection));\n        }\n\n        return new Collection(this.items.concat(collection.all()));\n    }\n\n    /**\n     * Checks if there is at least one occurance of an element using a closure.\n     * @param  {function} closure The closure the be used on each element.\n     * @return {boolean} true if at least one occurance exist, false otherwise.\n     * @example\n     * const collection = new Collection([\n     *     { name: 'John Snow', age: 14 },\n     *     { name: 'Bran Stark', age: 7 },\n     *     { name: 'Arya Stark', age: 9 }\n     * ]);\n     *\n     * collection.contains(stark => stark.name === 'John Snow'); // true\n     * collection.contains(stark => stark.name === 'Eddard Stark'); // false\n     */\n    contains(closure) {\n        return !! this.first(closure);\n    }\n\n    /**\n     * Gets the number of items in the collection.\n     *\n     * @return {number} Number of items in the collection.\n     * @example\n     * const collection = new Collection([1, 2, 3]);\n     * console.log(collection.count()); // 3\n     */\n    count() {\n        return this.items.length;\n    }\n\n\n    /**\n     * Executes a callback for each element in the collection.\n     *\n     * @param  {function} callback the callback to be excuted for each item.\n     * @return {Collection} The collection object.\n     * @example\n     * const collection = new Collection(['this', 'is', 'collectionjs']);\n     * collection.each(t => console.log(t)); // this is collectionjs\n     */\n    each(callback) {\n        this.items.forEach(callback);\n\n        return this;\n    }\n\n    /**\n     * Filters the collection using a predicate (callback that returns a boolean).\n     *\n     * @param  {function} callback A function that returns a boolean expression.\n     * @return {Collection} Filtered collection.\n     * @example\n     * const collection = new Collection([\n     *     { name: 'Arya Stark', age: 9 },\n     *     { name: 'Bran Stark', age: 7 },\n     *     { name: 'Jon Snow', age: 14 }\n     * ]).filter(stark => stark.age === 14);\n     * console.log(collection.all()); // [{ name: 'Jon Snow', age: 14 }]\n     */\n    filter(callback) {\n        return new Collection(this.items.filter(callback));\n    }\n\n    /**\n     * Returns the index of an element.\n     *\n     * @param  {*} item The item to be searched.\n     * @return {number} The index of the item. -1 means it wasn't found.\n     * @example\n     * const collection = new Collection(['jon', 'arya', 'bran']);\n     * console.log(collection.find('bran')); // 2\n     * console.log(collection.find('ed')); // -1\n     */\n    find(item) {\n        return this.items.indexOf(item);\n    }\n\n    /**\n     * Gets the first element satisfying a critera.\n     *\n     * @param  {function} [callback=null] the predicate (callback) that will be applied on items.\n     * @return {*} the first item to satisfy the critera.\n     * @example <caption>Using a callback</caption>\n     * const first = new Collection([\n     *     { name: 'Bran Stark', age: 7 },\n     *     { name: 'Arya Stark', age: 9 },\n     *     { name: 'Jon Snow', age: 14 }\n     * ]).first(item => item.age > 7);\n     *\n     * console.log(first); // { name: 'Arya Stark', age: 9 }\n     * @example <caption>No Arguments</caption>\n     * const first = new Collection([\n     *     { name: 'Bran Stark', age: 7 },\n     *     { name: 'Arya Stark', age: 9 },\n     *     { name: 'Jon Snow', age: 14 }\n     * ]).first();\n     *\n     * console.log(first); // { name: 'Bran Stark', age: 7 }\n     */\n    first(callback = null) {\n        if (! this.count()) {\n            return null;\n        }\n\n        if (callback && typeof(callback) === 'function') {\n            for (let i = 0; i < this.count(); i++) {\n                if (callback(this.items[i])) {\n                    return this.items[i];\n                }\n            }\n\n            return null;\n        }\n\n        return this.items[0];\n    }\n\n    /**\n     * Flattens the collection elements.\n     *\n     * @param  {Boolean} [deep=false] recursively flatten the items (multi-level).\n     * @return {Collection} the flattened collection.\n     * @example <caption>Just one level</caption>\n     * const collection = new Collection([1, [2, [3, [4]], 5]]).flatten();\n     * console.log(collection.all()); // [1, 2, [3, [4]], 5]\n     *\n     * @example <caption>Deep</caption>\n     * const collection = new Collection([1, [2, [3, [4]], 5]]).flatten(true);\n     * console.log(collection.all()); // [1, 2, 3, 4, 5]\n     */\n    flatten(deep = false) {\n        const flattened = new Collection([].concat(...this.items));\n\n        if (deep && flattened.all().some(Array.isArray)) {\n            return flattened.flatten(true);\n        }\n\n        return flattened;\n    }\n\n    /**\n     * Gets an element at a specified index.\n     *\n     * @param  {number} index the index of the item.\n     * @return {*} the item at that index.\n     * @example\n     * const collection = new Collection([1, 2, 3]);\n     * console.log(collection.get(2)); // 3\n     */\n    get(index) {\n        return this.items[index];\n    }\n\n    /**\n     * Joins the collection elements into a string.\n     *\n     * @param  {string} [seperator=','] The seperator between each element and the next.\n     * @return {string} The joined string.\n     *\n     * @example\n     * const collection = new Collection(['Wind', 'Rain', 'Fire']);\n     * console.log(collection.join()); // 'Wind,Rain,Fire'\n     * console.log(collection.join(', ')); 'Wind, Rain, Fire'\n     */\n    join(seperator = ',') {\n        return this.items.join(seperator);\n    }\n\n    /**\n     * Gets the collection elements keys in a new collection.\n     *\n     * @return {Collection} The keys collection.\n     * @example <caption>Objects</caption>\n     * const keys = new Collection({\n     *     arya: 10,\n     *     john: 20,\n     *     potato: 30\n     * }).keys();\n     * console.log(keys); // ['arya', 'john', 'potato']\n     *\n     * @example <caption>Regular Array</caption>\n     * const keys = new Collection(['arya', 'john', 'potato']).keys();\n     * console.log(keys); // ['0', '1', '2']\n     */\n    keys() {\n        let keys = [];\n\n        if (typeof this.items === 'object') {\n            keys = Object.keys(this.items);\n        } else {\n            keys = [...this.items.keys()];\n        }\n\n        return new Collection(keys);\n    }\n\n    /**\n     * Gets the last element to satisfy a callback.\n     *\n     * @param  {function} [callback=null] the predicate to be checked on all elements.\n     * @return {*} The last element in the collection that satisfies the predicate.\n     * @example <caption>Using a callback</caption>\n     * const last = new Collection([\n     *     { name: 'Bran Stark', age: 7 },\n     *     { name: 'Arya Stark', age: 9 },\n     *     { name: 'Jon Snow', age: 14 }\n     * ]).last(item => item.age > 7);\n     *\n     * console.log(last); // { name: 'Jon Snow', age: 14 }\n     * @example <caption>No Arguments</caption>\n     * const last = new Collection([\n     *     { name: 'Bran Stark', age: 7 },\n     *     { name: 'Arya Stark', age: 9 },\n     *     { name: 'Jon Snow', age: 14 }\n     * ]).last();\n     *\n     * console.log(last); // { name: 'Jon Snow', age: 14 }\n     */\n    last(callback = null) {\n        if (! this.count()) {\n            return null;\n        }\n\n        if (callback && typeof(callback) === 'function') {\n            return this.filter(callback).last();\n        }\n\n        return this.items[this.count() - 1];\n    }\n\n    /**\n     * Maps each element using a mapping function and collects the mapped items.\n     * @param  {function} callback the mapping function.\n     * @return {Collection} collection containing the mapped items.\n     * @example\n     * const collection = new Collection([\n     *     { name: 'Bran Stark', age: 7 },\n     *     { name: 'Arya Stark', age: 9 },\n     *     { name: 'Jon Snow', age: 14 }\n     * ]).map(stark => stark.name);\n     * console.log(collection.all()); ['Bran Stark', 'Arya Stark', 'Jon Snow']\n     */\n    map(callback) {\n        return new Collection(this.items.map(callback));\n    }\n\n    /**\n     * Extracts a property from the objects in the collection.\n     *\n     * @param  {string} property the name of the property to be extracted.\n     * @return {Collection} A collection with the extracted items.\n     * @example\n     * const collection = new Collection([\n     *     { name: 'Bran Stark', age: 7 },\n     *     { name: 'Arya Stark', age: 9 },\n     *     { name: 'Jon Snow', age: 14 }\n     * ]).pluck('name');\n     * console.log(collection.all()); ['Bran Stark', 'Arya Stark', 'Jon Snow']\n     */\n    pluck(property) {\n        return this.map((item) => item[property]);\n    }\n\n    /**\n     * Adds an element to the collection.\n     *\n     * @param  {*} item the item to be added.\n     * @return {Collection} The collection object.\n     * @example\n     * const collection = new Collection().push('First');\n     * console.log(collection.first()); // \"First\"\n     */\n    push(item) {\n        return this.add(item);\n    }\n\n    /**\n     * Reduces the collection to a single value using a reducing function.\n     *\n     * @param  {function} callback the reducing function.\n     * @param  {*} initial  initial value.\n     * @return {*} The reduced results.\n     * @example\n     * const value = new Collection([1, 2, 3]).reduce(\n     *     (previous, current) => previous + current,\n     *      0\n     *  );\n     *  console.log(value); // 6\n     */\n    reduce(callback, initial) {\n        return this.items.reduce(callback, initial);\n    }\n\n    /**\n     * Removes the elements that do not satisfy the predicate.\n     *\n     * @param  {function} callback the predicate used on each item.\n     * @return {Collection} A collection without the rejected elements.\n     * @example\n     * const collection = new Collection([\n     *     { name: 'Arya Stark', age: 9 },\n     *     { name: 'Bran Stark', age: 7 },\n     *     { name: 'Jon Snow', age: 14 }\n     * ]).reject(stark => stark.age < 14);\n     * console.log(collection.all()); // [{ name: 'Jon Snow', age: 14 }]\n     */\n    reject(callback) {\n        const items = [];\n        this.items.forEach((item) => {\n            if (! callback(item)) {\n                items.push(item);\n            }\n        });\n\n        return new Collection(items);\n    }\n\n    /**\n     * Removes an item from the collection.\n     *\n     * @param  {*} item the item to be searched and removed, first occurance will be removed.\n     * @return {boolean} True if the element was removed, false otherwise.\n     * @example\n     * const collection = new Collection(['john', 'arya', 'bran']);\n     * collection.remove('john');\n     * console.log(collection.all()); // ['arya', 'bran']\n     */\n    remove(item) {\n        const index = this.find(item);\n        if (~index) {\n            this.items.splice(index, 1);\n\n            return true;\n        }\n\n        return false;\n    }\n\n    /**\n     * Reverses the collection order.\n     *\n     * @return {Collection} A new collection with the reversed order.\n     * @example\n     * const collection = new Collection(['one', 'two', 'three']).reverse();\n     * console.log(collection.all()); // ['three', 'two', 'one']\n     */\n    reverse() {\n        return new Collection(this.items.reverse());\n    }\n\n    /**\n     * Skips a specified number of elements.\n     *\n     * @param  {number} count the number of items to be skipped.\n     * @return {Collection} A collection without the skipped items.\n     * @example\n     * const collection = new Collection(['John', 'Arya', 'Bran', 'Sansa']).skip(2);\n     * console.log(collection.all()); // ['Bran', 'Sansa']\n     */\n    skip(count) {\n        return this.slice(count);\n    }\n\n    /**\n     * Slices the collection starting from a specific index and ending at a specified index.\n     *\n     * @param  {number} start The zero-based starting index.\n     * @param  {number} [end=length] The zero-based ending index.\n     * @return {Collection} A collection with the sliced items.\n     * @example <caption>start and end are specified</caption>\n     * const collection = new Collection([0, 1, 2, 3, 4, 5, 6]).slice(2, 4);\n     * console.log(collection.all()); // [2, 3]\n     *\n     * @example <caption>only start is specified</caption>\n     * const collection = new Collection([0, 1, 2, 3, 4, 5, 6]).slice(2);\n     * console.log(collection.all()); // [2, 3, 4, 5, 6]\n     */\n    slice(start, end = this.items.length) {\n        return new Collection(this.items.slice(start, end));\n    }\n\n    /**\n     * Sorts the elements of a collection and returns a new sorted collection.\n     * note that it doesn't change the orignal collection and it creates a\n     * shallow copy.\n     *\n     * @param  {function} [compare=null] the compare function.\n     * @return {Collection} A new collection with the sorted items.\n     *\n     * @example\n     * const collection = new Collection([5, 3, 4, 1, 2]);\n     * const sorted = collection.sort();\n     * // original collection is intact.\n     * console.log(collection.all()); // [5, 3, 4, 1, 2]\n     * console.log(sorted.all()); // [1, 2, 3, 4, 5]\n     */\n    sort(compare = null) {\n        return new Collection(this.items.slice().sort(compare));\n    }\n\n    /**\n     * Sorts the collection by key value comaprison, given that the items are objects.\n     * It creates a shallow copy and retains the order of the orignal collection.\n     *\n     * @param  {string} property the key or the property to be compared.\n     * @param  {string} [order='asc'] The sorting order.\n     * use 'asc' for ascending or 'desc' for descending, case insensitive.\n     * @return {Collection} A new Collection with the sorted items.\n     *\n     * @example\n     * const collection = new Collection([\n     *     { name: 'Jon Snow', age: 14 },\n     *     { name: 'Arya Stark', age: 9 },\n     *     { name: 'Bran Stark', age: 7 },\n     * ]).sortBy('age');\n     *\n     * console.log(collection.pluck('name').all()); // ['Brand Stark', 'Arya Stark', 'Jon Snow']\n     */\n    sortBy(property, order = 'asc') {\n        const isAscending = order.toLowerCase() === 'asc';\n\n        return this.sort((a, b) => {\n            if (a[property] > b[property]) {\n                return isAscending ? 1 : -1;\n            }\n\n            if (a[property] < b[property]) {\n                return isAscending ? -1 : 1;\n            }\n\n            return 0;\n        });\n    }\n\n    /**\n     * {stringifies the collection using JSON.stringify API.\n     *\n     * @return {string} The stringified value.\n     * @example\n     * const collection = new Collection([1, 2, 3]);\n     * console.log(collection.stringify()); // \"[1,2,3]\"\n     */\n    stringify() {\n        return JSON.stringify(this.items);\n    }\n\n    /**\n     * Sums the values of the array, or the properties, or the result of the callback.\n     *\n     * @param  {undefined|string|function} [property=null] the property to be summed.\n     * @return {*} The sum of values used in the summation.\n     * @example <caption>Summing elements</caption>\n     * const collection = new Collection([1, 2, 3]);\n     * console.log(collection.sum()); // 6\n     *\n     * @example <caption>Summing a property</caption>\n     * const collection = new Collection([\n     *     { name: 'Arya Stark', age: 9 },\n     *     { name: 'Bran Stark', age: 7 },\n     *     { name: 'Jon Snow', age: 14 }\n     * ]);\n     * console.log(collection.sum('age')); // 30\n     *\n     * @example <caption>Summing using a callback</caption>\n     * const collection = new Collection([\n     *     { name: 'Arya Stark', age: 9 },\n     *     { name: 'Bran Stark', age: 7 },\n     *     { name: 'Jon Snow', age: 14 }\n     * ]);\n     * console.log(collection.sum(i => i.age + 1)); // 33\n     */\n    sum(property = null) {\n        if (typeof property === 'string') {\n            return this.reduce((previous, current) =>\n                previous + current[property]\n            , 0);\n        }\n\n        if (typeof property === 'function') {\n            return this.reduce((previous, current) =>\n                previous + property(current)\n            , 0);\n        }\n\n        return this.reduce((previous, current) =>\n            previous + current\n        , 0);\n    }\n\n    /**\n     * Gets a new collection with the number of specified items from the begining or the end.\n     *\n     * @param  {number} count the number of items to take. Takes from end if negative.\n     * @return {Collection} A collection with the taken items.\n     * @example <caption>From the beginning</caption>\n     * const collection = new Collection([1, 2, 3, 4, 5]).take(3);\n     * console.log(collection.all()); // [1, 2, 3]\n     *\n     * @example <caption>From the end</caption>\n     * const collection = new Collection([1, 2, 3, 4, 5]).take(-3);\n     * console.log(collection.all()); // [5, 4 ,3]\n     */\n    take(count) {\n        if (! count) {\n            return new Collection([]);\n        }\n\n        if (count < 0) {\n            return new Collection(this.items.reverse()).take(-count);\n        }\n\n        return new Collection(this.items.slice(0, count));\n    }\n\n    /**\n     * Registers a new method on the collection prototype for future use.\n     * The closure gets the collection object passed as the first parameter then\n     * other parameters gets passed after.\n     *\n     * @todo Throw exception if method already defined.\n     * @param  {string} name The name of the macro function.\n     * @param  {function} callback A closure containing the behavior of the macro.\n     * @return {*} returns your callback result.\n     *\n     * @example\n     * Collection.macro('addToMembers', (collection, n) => collection.map(item => item + n));\n     * const col2 = new Collection([1, 2, 3, 4]).addToMembers(3);\n     * console.log(col2.all()); // [4, 5, 6, 7]\n     */\n    static macro(name, callback) {\n        if (Collection.prototype[name] !== undefined) {\n            throw new Error('Collection.macro(): This macro name is already defined.');\n        }\n\n        Collection.prototype[name] = function collectionMacroWrapper(...args) {\n            const collection = this;\n\n            return callback(collection, ...args);\n        };\n    }\n\n    /**\n     * Gets the values without preserving the keys.\n     *\n     * @return {Collection} A Collection containing the values.\n     * @example\n     * const collection = new Collection({\n     *     1: 2,\n     *     2: 3,\n     *     4: 5\n     * }).values();\n     *\n     * console.log(collection.all()); / /[2, 3, 5]\n     */\n    values() {\n        return this.keys().map(key => this.items[key]);\n    }\n\n    /**\n     * Filters the collection using a callback or equality comparison to a property in each item.\n     *\n     * @param  {function|string} callback The callback to be used to filter the collection.\n     * @param  {*} [value=null] The value to be compared.\n     * @return {Collection} A collection with the filtered items.\n     * @example <caption>Using a property name</caption>\n     * const collection = new Collection([\n     *     { name: 'Arya Stark', age: 9 },\n     *     { name: 'Bran Stark', age: 7 },\n     *     { name: 'Jon Snow', age: 14 }\n     * ]).where('age', 14);\n     * console.log(collection.all()); // [{ name: 'Jon Snow', age: 14 }]\n     *\n     * @example <caption>Using a callback</caption>\n     * const collection = new Collection([\n     *     { name: 'Arya Stark', age: 9 },\n     *     { name: 'Bran Stark', age: 7 },\n     *     { name: 'Jon Snow', age: 14 }\n     * ]).where(stark => stark.age === 14);\n     * console.log(collection.all()); // [{ name: 'Jon Snow', age: 14 }]\n     */\n    where(callback, value = null) {\n        if (typeof(callback) === 'string') {\n            return this.filter(item => item[callback] === value);\n        }\n\n        return this.filter(callback);\n    }\n\n    /**\n     * Pairs each item in the collection with another array item in the same index.\n     *\n     * @param  {Array|Collection} array the array to be paired with.\n     * @return {Collection} A collection with the paired items.\n     * @example\n     * const array = ['a', 'b', 'c']; // or a collection.\n     * const collection = new Collection([1, 2, 3]).zip(array);\n     * console.log(collection.all()); // [[1, 'a'], [2, 'b'], [3, 'c']]\n     */\n    zip(array) {\n        if (array instanceof Collection) {\n            return this.map((item, index) => [item, array.get(index)]);\n        }\n\n        return this.map((item, index) => [item, array[index]]);\n    }\n}\n"
  },
  {
    "__docId__": 1,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "Collection",
    "memberof": "src/collection.js",
    "longname": "src/collection.js~Collection",
    "access": null,
    "export": true,
    "importPath": "collectionsjs/src/collection.js",
    "importStyle": "Collection",
    "description": "The Collection object.",
    "examples": [
      "let collection = new Collection([1, 2, 3]);"
    ],
    "lineNumber": 7,
    "interface": false
  },
  {
    "__docId__": 2,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/collection.js~Collection",
    "longname": "src/collection.js~Collection#constructor",
    "access": null,
    "description": "The collection constructor.",
    "lineNumber": 15,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "[]",
        "defaultRaw": [],
        "name": "items",
        "description": "the array to collect."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Collection"
      ],
      "spread": false,
      "description": "A Collection object."
    },
    "generator": false
  },
  {
    "__docId__": 3,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "items",
    "memberof": "src/collection.js~Collection",
    "longname": "src/collection.js~Collection#items",
    "access": null,
    "description": "The internal array.",
    "lineNumber": 20,
    "type": {
      "nullable": null,
      "types": [
        "Array",
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 4,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "add",
    "memberof": "src/collection.js~Collection",
    "longname": "src/collection.js~Collection#add",
    "access": null,
    "description": "Adds an item to the collection.",
    "examples": [
      "const collection = new Collection();\ncollection.add('Arya');\nconsole.log(collection.first()); //outputs 'Arya'"
    ],
    "lineNumber": 33,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "item",
        "description": "the item to be added."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Collection"
      ],
      "spread": false,
      "description": "the collection object."
    },
    "generator": false
  },
  {
    "__docId__": 5,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "all",
    "memberof": "src/collection.js~Collection",
    "longname": "src/collection.js~Collection#all",
    "access": null,
    "description": "Gets the collected elements in an array.",
    "examples": [
      "const collection = new Collection([1, 2, 3]);\nconsole.log(collection.all()); // [1, 2, 3]"
    ],
    "lineNumber": 47,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": "the internal array."
    },
    "generator": false
  },
  {
    "__docId__": 6,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "average",
    "memberof": "src/collection.js~Collection",
    "longname": "src/collection.js~Collection#average",
    "access": null,
    "description": "Gets the average value of the array or a property or a callback return value.\nIf no property is provided: it will calculate the average value of the array (Numeric array).\nIf property is a string: it will calculate the average value of that property for all\n objects in the array.\nIf Property is a callback: the the averaging will use the value returned instead.",
    "examples": [
      "<caption>Averaging elements</caption>\nconst collection = new Collection([1, 2, 3]);\nconsole.log(collection.average()); // 2",
      "<caption>Averaging a property</caption>\nconst collection = new Collection([\n    { name: 'Arya Stark', age: 9 },\n    { name: 'Bran Stark', age: 7 },\n    { name: 'Jon Snow', age: 14 }\n]);\nconsole.log(collection.average('age')); // 10",
      "<caption>Averaging using a callback</caption>\nconst collection = new Collection([\n    { name: 'Arya Stark', age: 9 },\n    { name: 'Bran Stark', age: 7 },\n    { name: 'Jon Snow', age: 14 }\n]);\nconsole.log(collection.average(i => i.age)); // 10"
    ],
    "lineNumber": 79,
    "params": [
      {
        "nullable": null,
        "types": [
          "function",
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "null",
        "defaultRaw": null,
        "name": "property",
        "description": "The property name or the callback function.\ndefaults to null."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "The average value."
    },
    "generator": false
  },
  {
    "__docId__": 7,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "chunk",
    "memberof": "src/collection.js~Collection",
    "longname": "src/collection.js~Collection#chunk",
    "access": null,
    "description": "Chunks the collection into a new collection with equal length arrays as its items.",
    "examples": [
      "const collection = new Collection([1, 2, 3, 4, 5]).chunk(2);\nconsole.log(collection.all()); // [[1, 2], [3, 4], [5]]"
    ],
    "lineNumber": 92,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "size",
        "description": "the size of each chunk."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Collection"
      ],
      "spread": false,
      "description": "the new collection."
    },
    "generator": false
  },
  {
    "__docId__": 8,
    "kind": "method",
    "static": true,
    "variation": null,
    "name": "collect",
    "memberof": "src/collection.js~Collection",
    "longname": "src/collection.js~Collection.collect",
    "access": null,
    "description": "Static constructor. Will transform a string to array of strings.\ncool if you don't like using the 'new' keyword.",
    "examples": [
      "const collection = Collection.collect('abcd');\nconsole.log(collection.all()); // ['a', 'b', 'c', 'd']"
    ],
    "lineNumber": 116,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array",
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "collectable",
        "description": "the array or the string to wrapped in a collection."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Collection"
      ],
      "spread": false,
      "description": "A collection that wraps the collectable items."
    },
    "generator": false
  },
  {
    "__docId__": 9,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "concat",
    "memberof": "src/collection.js~Collection",
    "longname": "src/collection.js~Collection#concat",
    "access": null,
    "description": "Concatnates the collection with an array or another collection.",
    "examples": [
      "const collection = new Collection([1, 2, 3]);\nconst array = [4, 5, 6]; // or another collection.\nconst newCollection = collection.concat(array);\nconsole.log(newCollection.all()); // [1, 2, 3, 4, 5, 6]"
    ],
    "lineNumber": 136,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array",
          "Collection"
        ],
        "spread": false,
        "optional": false,
        "name": "collection",
        "description": "the array or the collection to be concatenated with."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Collection"
      ],
      "spread": false,
      "description": "concatenated collection."
    },
    "generator": false
  },
  {
    "__docId__": 10,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "contains",
    "memberof": "src/collection.js~Collection",
    "longname": "src/collection.js~Collection#contains",
    "access": null,
    "description": "Checks if there is at least one occurance of an element using a closure.",
    "examples": [
      "const collection = new Collection([\n    { name: 'John Snow', age: 14 },\n    { name: 'Bran Stark', age: 7 },\n    { name: 'Arya Stark', age: 9 }\n]);\n\ncollection.contains(stark => stark.name === 'John Snow'); // true\ncollection.contains(stark => stark.name === 'Eddard Stark'); // false"
    ],
    "lineNumber": 158,
    "params": [
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "closure",
        "description": "The closure the be used on each element."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "true if at least one occurance exist, false otherwise."
    },
    "generator": false
  },
  {
    "__docId__": 11,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "count",
    "memberof": "src/collection.js~Collection",
    "longname": "src/collection.js~Collection#count",
    "access": null,
    "description": "Gets the number of items in the collection.",
    "examples": [
      "const collection = new Collection([1, 2, 3]);\nconsole.log(collection.count()); // 3"
    ],
    "lineNumber": 170,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "Number of items in the collection."
    },
    "generator": false
  },
  {
    "__docId__": 12,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "each",
    "memberof": "src/collection.js~Collection",
    "longname": "src/collection.js~Collection#each",
    "access": null,
    "description": "Executes a callback for each element in the collection.",
    "examples": [
      "const collection = new Collection(['this', 'is', 'collectionjs']);\ncollection.each(t => console.log(t)); // this is collectionjs"
    ],
    "lineNumber": 184,
    "params": [
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "the callback to be excuted for each item."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Collection"
      ],
      "spread": false,
      "description": "The collection object."
    },
    "generator": false
  },
  {
    "__docId__": 13,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "filter",
    "memberof": "src/collection.js~Collection",
    "longname": "src/collection.js~Collection#filter",
    "access": null,
    "description": "Filters the collection using a predicate (callback that returns a boolean).",
    "examples": [
      "const collection = new Collection([\n    { name: 'Arya Stark', age: 9 },\n    { name: 'Bran Stark', age: 7 },\n    { name: 'Jon Snow', age: 14 }\n]).filter(stark => stark.age === 14);\nconsole.log(collection.all()); // [{ name: 'Jon Snow', age: 14 }]"
    ],
    "lineNumber": 203,
    "params": [
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "A function that returns a boolean expression."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Collection"
      ],
      "spread": false,
      "description": "Filtered collection."
    },
    "generator": false
  },
  {
    "__docId__": 14,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "find",
    "memberof": "src/collection.js~Collection",
    "longname": "src/collection.js~Collection#find",
    "access": null,
    "description": "Returns the index of an element.",
    "examples": [
      "const collection = new Collection(['jon', 'arya', 'bran']);\nconsole.log(collection.find('bran')); // 2\nconsole.log(collection.find('ed')); // -1"
    ],
    "lineNumber": 217,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "item",
        "description": "The item to be searched."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "The index of the item. -1 means it wasn't found."
    },
    "generator": false
  },
  {
    "__docId__": 15,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "first",
    "memberof": "src/collection.js~Collection",
    "longname": "src/collection.js~Collection#first",
    "access": null,
    "description": "Gets the first element satisfying a critera.",
    "examples": [
      "<caption>Using a callback</caption>\nconst first = new Collection([\n    { name: 'Bran Stark', age: 7 },\n    { name: 'Arya Stark', age: 9 },\n    { name: 'Jon Snow', age: 14 }\n]).first(item => item.age > 7);\n\nconsole.log(first); // { name: 'Arya Stark', age: 9 }",
      "<caption>No Arguments</caption>\nconst first = new Collection([\n    { name: 'Bran Stark', age: 7 },\n    { name: 'Arya Stark', age: 9 },\n    { name: 'Jon Snow', age: 14 }\n]).first();\n\nconsole.log(first); // { name: 'Bran Stark', age: 7 }"
    ],
    "lineNumber": 243,
    "params": [
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "null",
        "defaultRaw": null,
        "name": "callback",
        "description": "the predicate (callback) that will be applied on items."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "the first item to satisfy the critera."
    },
    "generator": false
  },
  {
    "__docId__": 16,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "flatten",
    "memberof": "src/collection.js~Collection",
    "longname": "src/collection.js~Collection#flatten",
    "access": null,
    "description": "Flattens the collection elements.",
    "examples": [
      "<caption>Just one level</caption>\nconst collection = new Collection([1, [2, [3, [4]], 5]]).flatten();\nconsole.log(collection.all()); // [1, 2, [3, [4]], 5]",
      "<caption>Deep</caption>\nconst collection = new Collection([1, [2, [3, [4]], 5]]).flatten(true);\nconsole.log(collection.all()); // [1, 2, 3, 4, 5]"
    ],
    "lineNumber": 274,
    "params": [
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "deep",
        "description": "recursively flatten the items (multi-level)."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Collection"
      ],
      "spread": false,
      "description": "the flattened collection."
    },
    "generator": false
  },
  {
    "__docId__": 17,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "get",
    "memberof": "src/collection.js~Collection",
    "longname": "src/collection.js~Collection#get",
    "access": null,
    "description": "Gets an element at a specified index.",
    "examples": [
      "const collection = new Collection([1, 2, 3]);\nconsole.log(collection.get(2)); // 3"
    ],
    "lineNumber": 293,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "index",
        "description": "the index of the item."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "the item at that index."
    },
    "generator": false
  },
  {
    "__docId__": 18,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "join",
    "memberof": "src/collection.js~Collection",
    "longname": "src/collection.js~Collection#join",
    "access": null,
    "description": "Joins the collection elements into a string.",
    "examples": [
      "const collection = new Collection(['Wind', 'Rain', 'Fire']);\nconsole.log(collection.join()); // 'Wind,Rain,Fire'\nconsole.log(collection.join(', ')); 'Wind, Rain, Fire'"
    ],
    "lineNumber": 308,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "','",
        "defaultRaw": "','",
        "name": "seperator",
        "description": "The seperator between each element and the next."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "The joined string."
    },
    "generator": false
  },
  {
    "__docId__": 19,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "keys",
    "memberof": "src/collection.js~Collection",
    "longname": "src/collection.js~Collection#keys",
    "access": null,
    "description": "Gets the collection elements keys in a new collection.",
    "examples": [
      "<caption>Objects</caption>\nconst keys = new Collection({\n    arya: 10,\n    john: 20,\n    potato: 30\n}).keys();\nconsole.log(keys); // ['arya', 'john', 'potato']",
      "<caption>Regular Array</caption>\nconst keys = new Collection(['arya', 'john', 'potato']).keys();\nconsole.log(keys); // ['0', '1', '2']"
    ],
    "lineNumber": 328,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Collection"
      ],
      "spread": false,
      "description": "The keys collection."
    },
    "generator": false
  },
  {
    "__docId__": 20,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "last",
    "memberof": "src/collection.js~Collection",
    "longname": "src/collection.js~Collection#last",
    "access": null,
    "description": "Gets the last element to satisfy a callback.",
    "examples": [
      "<caption>Using a callback</caption>\nconst last = new Collection([\n    { name: 'Bran Stark', age: 7 },\n    { name: 'Arya Stark', age: 9 },\n    { name: 'Jon Snow', age: 14 }\n]).last(item => item.age > 7);\n\nconsole.log(last); // { name: 'Jon Snow', age: 14 }",
      "<caption>No Arguments</caption>\nconst last = new Collection([\n    { name: 'Bran Stark', age: 7 },\n    { name: 'Arya Stark', age: 9 },\n    { name: 'Jon Snow', age: 14 }\n]).last();\n\nconsole.log(last); // { name: 'Jon Snow', age: 14 }"
    ],
    "lineNumber": 362,
    "params": [
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "null",
        "defaultRaw": null,
        "name": "callback",
        "description": "the predicate to be checked on all elements."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "The last element in the collection that satisfies the predicate."
    },
    "generator": false
  },
  {
    "__docId__": 21,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "map",
    "memberof": "src/collection.js~Collection",
    "longname": "src/collection.js~Collection#map",
    "access": null,
    "description": "Maps each element using a mapping function and collects the mapped items.",
    "examples": [
      "const collection = new Collection([\n    { name: 'Bran Stark', age: 7 },\n    { name: 'Arya Stark', age: 9 },\n    { name: 'Jon Snow', age: 14 }\n]).map(stark => stark.name);\nconsole.log(collection.all()); ['Bran Stark', 'Arya Stark', 'Jon Snow']"
    ],
    "lineNumber": 386,
    "params": [
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "the mapping function."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Collection"
      ],
      "spread": false,
      "description": "collection containing the mapped items."
    },
    "generator": false
  },
  {
    "__docId__": 22,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "pluck",
    "memberof": "src/collection.js~Collection",
    "longname": "src/collection.js~Collection#pluck",
    "access": null,
    "description": "Extracts a property from the objects in the collection.",
    "examples": [
      "const collection = new Collection([\n    { name: 'Bran Stark', age: 7 },\n    { name: 'Arya Stark', age: 9 },\n    { name: 'Jon Snow', age: 14 }\n]).pluck('name');\nconsole.log(collection.all()); ['Bran Stark', 'Arya Stark', 'Jon Snow']"
    ],
    "lineNumber": 403,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "property",
        "description": "the name of the property to be extracted."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Collection"
      ],
      "spread": false,
      "description": "A collection with the extracted items."
    },
    "generator": false
  },
  {
    "__docId__": 23,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "push",
    "memberof": "src/collection.js~Collection",
    "longname": "src/collection.js~Collection#push",
    "access": null,
    "description": "Adds an element to the collection.",
    "examples": [
      "const collection = new Collection().push('First');\nconsole.log(collection.first()); // \"First\""
    ],
    "lineNumber": 416,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "item",
        "description": "the item to be added."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Collection"
      ],
      "spread": false,
      "description": "The collection object."
    },
    "generator": false
  },
  {
    "__docId__": 24,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "reduce",
    "memberof": "src/collection.js~Collection",
    "longname": "src/collection.js~Collection#reduce",
    "access": null,
    "description": "Reduces the collection to a single value using a reducing function.",
    "examples": [
      "const value = new Collection([1, 2, 3]).reduce(\n    (previous, current) => previous + current,\n     0\n );\n console.log(value); // 6"
    ],
    "lineNumber": 433,
    "params": [
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "the reducing function."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "initial",
        "description": "initial value."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "The reduced results."
    },
    "generator": false
  },
  {
    "__docId__": 25,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "reject",
    "memberof": "src/collection.js~Collection",
    "longname": "src/collection.js~Collection#reject",
    "access": null,
    "description": "Removes the elements that do not satisfy the predicate.",
    "examples": [
      "const collection = new Collection([\n    { name: 'Arya Stark', age: 9 },\n    { name: 'Bran Stark', age: 7 },\n    { name: 'Jon Snow', age: 14 }\n]).reject(stark => stark.age < 14);\nconsole.log(collection.all()); // [{ name: 'Jon Snow', age: 14 }]"
    ],
    "lineNumber": 450,
    "params": [
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "the predicate used on each item."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Collection"
      ],
      "spread": false,
      "description": "A collection without the rejected elements."
    },
    "generator": false
  },
  {
    "__docId__": 26,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "remove",
    "memberof": "src/collection.js~Collection",
    "longname": "src/collection.js~Collection#remove",
    "access": null,
    "description": "Removes an item from the collection.",
    "examples": [
      "const collection = new Collection(['john', 'arya', 'bran']);\ncollection.remove('john');\nconsole.log(collection.all()); // ['arya', 'bran']"
    ],
    "lineNumber": 471,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "item",
        "description": "the item to be searched and removed, first occurance will be removed."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "True if the element was removed, false otherwise."
    },
    "generator": false
  },
  {
    "__docId__": 27,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "reverse",
    "memberof": "src/collection.js~Collection",
    "longname": "src/collection.js~Collection#reverse",
    "access": null,
    "description": "Reverses the collection order.",
    "examples": [
      "const collection = new Collection(['one', 'two', 'three']).reverse();\nconsole.log(collection.all()); // ['three', 'two', 'one']"
    ],
    "lineNumber": 490,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Collection"
      ],
      "spread": false,
      "description": "A new collection with the reversed order."
    },
    "generator": false
  },
  {
    "__docId__": 28,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "skip",
    "memberof": "src/collection.js~Collection",
    "longname": "src/collection.js~Collection#skip",
    "access": null,
    "description": "Skips a specified number of elements.",
    "examples": [
      "const collection = new Collection(['John', 'Arya', 'Bran', 'Sansa']).skip(2);\nconsole.log(collection.all()); // ['Bran', 'Sansa']"
    ],
    "lineNumber": 503,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "count",
        "description": "the number of items to be skipped."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Collection"
      ],
      "spread": false,
      "description": "A collection without the skipped items."
    },
    "generator": false
  },
  {
    "__docId__": 29,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "slice",
    "memberof": "src/collection.js~Collection",
    "longname": "src/collection.js~Collection#slice",
    "access": null,
    "description": "Slices the collection starting from a specific index and ending at a specified index.",
    "examples": [
      "<caption>start and end are specified</caption>\nconst collection = new Collection([0, 1, 2, 3, 4, 5, 6]).slice(2, 4);\nconsole.log(collection.all()); // [2, 3]",
      "<caption>only start is specified</caption>\nconst collection = new Collection([0, 1, 2, 3, 4, 5, 6]).slice(2);\nconsole.log(collection.all()); // [2, 3, 4, 5, 6]"
    ],
    "lineNumber": 521,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "start",
        "description": "The zero-based starting index."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "length",
        "defaultRaw": "length",
        "name": "end",
        "description": "The zero-based ending index."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Collection"
      ],
      "spread": false,
      "description": "A collection with the sliced items."
    },
    "generator": false
  },
  {
    "__docId__": 30,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "sort",
    "memberof": "src/collection.js~Collection",
    "longname": "src/collection.js~Collection#sort",
    "access": null,
    "description": "Sorts the elements of a collection and returns a new sorted collection.\nnote that it doesn't change the orignal collection and it creates a\nshallow copy.",
    "examples": [
      "const collection = new Collection([5, 3, 4, 1, 2]);\nconst sorted = collection.sort();\n// original collection is intact.\nconsole.log(collection.all()); // [5, 3, 4, 1, 2]\nconsole.log(sorted.all()); // [1, 2, 3, 4, 5]"
    ],
    "lineNumber": 540,
    "params": [
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "null",
        "defaultRaw": null,
        "name": "compare",
        "description": "the compare function."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Collection"
      ],
      "spread": false,
      "description": "A new collection with the sorted items."
    },
    "generator": false
  },
  {
    "__docId__": 31,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "sortBy",
    "memberof": "src/collection.js~Collection",
    "longname": "src/collection.js~Collection#sortBy",
    "access": null,
    "description": "Sorts the collection by key value comaprison, given that the items are objects.\nIt creates a shallow copy and retains the order of the orignal collection.",
    "examples": [
      "const collection = new Collection([\n    { name: 'Jon Snow', age: 14 },\n    { name: 'Arya Stark', age: 9 },\n    { name: 'Bran Stark', age: 7 },\n]).sortBy('age');\n\nconsole.log(collection.pluck('name').all()); // ['Brand Stark', 'Arya Stark', 'Jon Snow']"
    ],
    "lineNumber": 562,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "property",
        "description": "the key or the property to be compared."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'asc'",
        "defaultRaw": "'asc'",
        "name": "order",
        "description": "The sorting order.\nuse 'asc' for ascending or 'desc' for descending, case insensitive."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Collection"
      ],
      "spread": false,
      "description": "A new Collection with the sorted items."
    },
    "generator": false
  },
  {
    "__docId__": 32,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "stringify",
    "memberof": "src/collection.js~Collection",
    "longname": "src/collection.js~Collection#stringify",
    "access": null,
    "description": "{stringifies the collection using JSON.stringify API.",
    "examples": [
      "const collection = new Collection([1, 2, 3]);\nconsole.log(collection.stringify()); // \"[1,2,3]\""
    ],
    "lineNumber": 586,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "The stringified value."
    },
    "generator": false
  },
  {
    "__docId__": 33,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "sum",
    "memberof": "src/collection.js~Collection",
    "longname": "src/collection.js~Collection#sum",
    "access": null,
    "description": "Sums the values of the array, or the properties, or the result of the callback.",
    "examples": [
      "<caption>Summing elements</caption>\nconst collection = new Collection([1, 2, 3]);\nconsole.log(collection.sum()); // 6",
      "<caption>Summing a property</caption>\nconst collection = new Collection([\n    { name: 'Arya Stark', age: 9 },\n    { name: 'Bran Stark', age: 7 },\n    { name: 'Jon Snow', age: 14 }\n]);\nconsole.log(collection.sum('age')); // 30",
      "<caption>Summing using a callback</caption>\nconst collection = new Collection([\n    { name: 'Arya Stark', age: 9 },\n    { name: 'Bran Stark', age: 7 },\n    { name: 'Jon Snow', age: 14 }\n]);\nconsole.log(collection.sum(i => i.age + 1)); // 33"
    ],
    "lineNumber": 615,
    "params": [
      {
        "nullable": null,
        "types": [
          "undefined",
          "string",
          "function"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "null",
        "defaultRaw": null,
        "name": "property",
        "description": "the property to be summed."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "The sum of values used in the summation."
    },
    "generator": false
  },
  {
    "__docId__": 34,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "take",
    "memberof": "src/collection.js~Collection",
    "longname": "src/collection.js~Collection#take",
    "access": null,
    "description": "Gets a new collection with the number of specified items from the begining or the end.",
    "examples": [
      "<caption>From the beginning</caption>\nconst collection = new Collection([1, 2, 3, 4, 5]).take(3);\nconsole.log(collection.all()); // [1, 2, 3]",
      "<caption>From the end</caption>\nconst collection = new Collection([1, 2, 3, 4, 5]).take(-3);\nconsole.log(collection.all()); // [5, 4 ,3]"
    ],
    "lineNumber": 646,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "count",
        "description": "the number of items to take. Takes from end if negative."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Collection"
      ],
      "spread": false,
      "description": "A collection with the taken items."
    },
    "generator": false
  },
  {
    "__docId__": 35,
    "kind": "method",
    "static": true,
    "variation": null,
    "name": "macro",
    "memberof": "src/collection.js~Collection",
    "longname": "src/collection.js~Collection.macro",
    "access": null,
    "description": "Registers a new method on the collection prototype for future use.\nThe closure gets the collection object passed as the first parameter then\nother parameters gets passed after.",
    "examples": [
      "Collection.macro('addToMembers', (collection, n) => collection.map(item => item + n));\nconst col2 = new Collection([1, 2, 3, 4]).addToMembers(3);\nconsole.log(col2.all()); // [4, 5, 6, 7]"
    ],
    "lineNumber": 673,
    "todo": [
      "Throw exception if method already defined."
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "The name of the macro function."
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "A closure containing the behavior of the macro."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "returns your callback result."
    },
    "generator": false
  },
  {
    "__docId__": 36,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "values",
    "memberof": "src/collection.js~Collection",
    "longname": "src/collection.js~Collection#values",
    "access": null,
    "description": "Gets the values without preserving the keys.",
    "examples": [
      "const collection = new Collection({\n    1: 2,\n    2: 3,\n    4: 5\n}).values();\n\nconsole.log(collection.all()); / /[2, 3, 5]"
    ],
    "lineNumber": 698,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Collection"
      ],
      "spread": false,
      "description": "A Collection containing the values."
    },
    "generator": false
  },
  {
    "__docId__": 37,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "where",
    "memberof": "src/collection.js~Collection",
    "longname": "src/collection.js~Collection#where",
    "access": null,
    "description": "Filters the collection using a callback or equality comparison to a property in each item.",
    "examples": [
      "<caption>Using a property name</caption>\nconst collection = new Collection([\n    { name: 'Arya Stark', age: 9 },\n    { name: 'Bran Stark', age: 7 },\n    { name: 'Jon Snow', age: 14 }\n]).where('age', 14);\nconsole.log(collection.all()); // [{ name: 'Jon Snow', age: 14 }]",
      "<caption>Using a callback</caption>\nconst collection = new Collection([\n    { name: 'Arya Stark', age: 9 },\n    { name: 'Bran Stark', age: 7 },\n    { name: 'Jon Snow', age: 14 }\n]).where(stark => stark.age === 14);\nconsole.log(collection.all()); // [{ name: 'Jon Snow', age: 14 }]"
    ],
    "lineNumber": 724,
    "params": [
      {
        "nullable": null,
        "types": [
          "function",
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "The callback to be used to filter the collection."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "null",
        "defaultRaw": null,
        "name": "value",
        "description": "The value to be compared."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Collection"
      ],
      "spread": false,
      "description": "A collection with the filtered items."
    },
    "generator": false
  },
  {
    "__docId__": 38,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "zip",
    "memberof": "src/collection.js~Collection",
    "longname": "src/collection.js~Collection#zip",
    "access": null,
    "description": "Pairs each item in the collection with another array item in the same index.",
    "examples": [
      "const array = ['a', 'b', 'c']; // or a collection.\nconst collection = new Collection([1, 2, 3]).zip(array);\nconsole.log(collection.all()); // [[1, 'a'], [2, 'b'], [3, 'c']]"
    ],
    "lineNumber": 742,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array",
          "Collection"
        ],
        "spread": false,
        "optional": false,
        "name": "array",
        "description": "the array to be paired with."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Collection"
      ],
      "spread": false,
      "description": "A collection with the paired items."
    },
    "generator": false
  },
  {
    "__docId__": 40,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Infinity",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 41,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~NaN",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 42,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~undefined",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 43,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~null",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 44,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Object",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 45,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~object",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 46,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Function",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 47,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~function",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 48,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Boolean",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 49,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~boolean",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 50,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Symbol",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 51,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Error",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 52,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~EvalError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 53,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~InternalError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 54,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~RangeError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 55,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~ReferenceError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 56,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~SyntaxError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 57,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~TypeError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 58,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~URIError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 59,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Number",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 60,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~number",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 61,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Date",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 62,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~String",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 63,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~string",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 64,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~RegExp",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 65,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 66,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Int8Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 67,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint8Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 68,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint8ClampedArray",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 69,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Int16Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 70,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint16Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 71,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Int32Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 72,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint32Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 73,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Float32Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 74,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Float64Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 75,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Map",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 76,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Set",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 77,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~WeakMap",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 78,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~WeakSet",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 79,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~ArrayBuffer",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 80,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~DataView",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 81,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~JSON",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 82,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Promise",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 83,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Generator",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 84,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~GeneratorFunction",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 85,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Reflect",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 86,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Proxy",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 88,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "CanvasRenderingContext2D",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~CanvasRenderingContext2D",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 89,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "DocumentFragment",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/DocumentFragment",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~DocumentFragment",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 90,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Element",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/Element",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~Element",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 91,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Event",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/Event",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~Event",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 92,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Node",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/Node",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~Node",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 93,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "NodeList",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/NodeList",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~NodeList",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 94,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "XMLHttpRequest",
    "externalLink": "https://developer.mozilla.org/en/docs/Web/API/XMLHttpRequest",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~XMLHttpRequest",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 95,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "AudioContext",
    "externalLink": "https://developer.mozilla.org/en/docs/Web/API/AudioContext",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~AudioContext",
    "access": null,
    "description": "",
    "builtinExternal": true
  }
]