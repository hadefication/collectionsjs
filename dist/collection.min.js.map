{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///collection.min.js","webpack:///webpack/bootstrap 8725d25858329d6be299","webpack:///./src/collection.js"],"names":["root","factory","exports","module","define","amd","Collection","this","modules","__webpack_require__","moduleId","installedModules","id","loaded","call","m","c","p","_toConsumableArray","arr","Array","isArray","i","arr2","length","from","_classCallCheck","instance","Constructor","TypeError","Object","defineProperty","value","_typeof","Symbol","iterator","obj","constructor","_createClass","defineProperties","target","props","descriptor","enumerable","configurable","writable","key","protoProps","staticProps","prototype","items","arguments","undefined","item","push","property","sum","count","size","slice","collection","concat","all","callback","forEach","filter","index","_ref","deep","flattened","apply","some","flatten","keys","last","map","add","initial","reduce","reverse","start","end","compare","sort","order","isAscending","toLowerCase","a","b","JSON","stringify","previous","current","take","_this","array","find","collectable","split"],"mappings":"CAAA,SAAAA,EAAAC,GACA,gBAAAC,UAAA,gBAAAC,QACAA,OAAAD,QAAAD,IACA,kBAAAG,gBAAAC,IACAD,UAAAH,GACA,gBAAAC,SACAA,QAAAI,WAAAL,IAEAD,EAAAM,WAAAL,KACCM,KAAA,WACD,MCAgB,UAAUC,GCN1B,QAAAC,GAAAC,GAGA,GAAAC,EAAAD,GACA,MAAAC,GAAAD,GAAAR,OAGA,IAAAC,GAAAQ,EAAAD,IACAR,WACAU,GAAAF,EACAG,UAUA,OANAL,GAAAE,GAAAI,KAAAX,EAAAD,QAAAC,IAAAD,QAAAO,GAGAN,EAAAU,UAGAV,EAAAD,QAvBA,GAAAS,KAqCA,OATAF,GAAAM,EAAAP,EAGAC,EAAAO,EAAAL,EAGAF,EAAAQ,EAAA,GAGAR,EAAA,KDgBM,SAASN,EAAQD,GAEtB,YAUA,SAASgB,GAAmBC,GAAO,GAAIC,MAAMC,QAAQF,GAAM,CAAE,IAAK,GAAIG,GAAI,EAAGC,EAAOH,MAAMD,EAAIK,QAASF,EAAIH,EAAIK,OAAQF,IAAOC,EAAKD,GAAKH,EAAIG,EAAM,OAAOC,GAAe,MAAOH,OAAMK,KAAKN,GAE1L,QAASO,GAAgBC,EAAUC,GAAe,KAAMD,YAAoBC,IAAgB,KAAM,IAAIC,WAAU,qCAVhHC,OAAOC,eAAe7B,EAAS,cAC3B8B,UAGJ,IAAIC,GAA4B,kBAAXC,SAAoD,gBAApBA,QAAOC,SAAwB,SAAUC,GAAO,aAAcA,IAAS,SAAUA,GAAO,MAAOA,IAAyB,kBAAXF,SAAyBE,EAAIC,cAAgBH,OAAS,eAAkBE,IAEtOE,EAAe,WAAc,QAASC,GAAiBC,EAAQC,GAAS,IAAK,GAAInB,GAAI,EAAGA,EAAImB,EAAMjB,OAAQF,IAAK,CAAE,GAAIoB,GAAaD,EAAMnB,EAAIoB,GAAWC,WAAaD,EAAWC,eAAqBD,EAAWE,gBAAyB,SAAWF,KAAYA,EAAWG,aAAiBf,OAAOC,eAAeS,EAAQE,EAAWI,IAAKJ,IAAiB,MAAO,UAAUd,EAAamB,EAAYC,GAAiJ,MAA9HD,IAAYR,EAAiBX,EAAYqB,UAAWF,GAAiBC,GAAaT,EAAiBX,EAAaoB,GAAqBpB,ME1D5gBtB,EFuEH,WE/Dd,QAAAA,KAAwB,GAAZ4C,GAAYC,UAAA3B,QAAA,GAAA4B,SAAAD,UAAA,MAAAA,UAAA,EAAAzB,GAAAnB,KAAAD,GAKpBC,KAAK2C,MAAQA,EAMb3C,KAAKiB,OAAS0B,EAAM1B,OFm0BvB,MAzuBAc,GAAahC,IACTwC,IAAK,MACLd,MAAO,SE/ERqB,GAIA,MAHA9C,MAAK2C,MAAMI,KAAKD,GAChB9C,KAAKiB,OAASjB,KAAK2C,MAAM1B,OAElBjB,QF4FNuC,IAAK,MACLd,MAAO,WEjFR,MAAOzB,MAAK2C,SFmHXJ,IAAK,UACLd,MAAO,WErFa,GAAjBuB,GAAiBJ,UAAA3B,QAAA,GAAA4B,SAAAD,UAAA,GAAN,KAAMA,UAAA,EACrB,OAAO5C,MAAKiD,IAAID,GAAYhD,KAAKkD,WFqGhCX,IAAK,QACLd,MAAO,SE1FN0B,GACF,GAAIA,GAAQ,EACR,MAAO,IAAIpD,EAKf,KAAK,GAFC4C,MAEG5B,EAAI,EAAGA,EAAIf,KAAKiB,OAAQF,GAAKoC,EAClCR,EAAMI,KAAK/C,KAAK2C,MAAMS,MAAMrC,EAAGA,EAAIoC,GAGvC,OAAO,IAAIpD,GAAW4C,MFyGrBJ,IAAK,SAcLd,MAAO,SEtFL4B,GACH,MACW,IAAItD,GADXc,MAAMC,QAAQuC,GACQrD,KAAK2C,MAAMW,OAAOD,GAGtBrD,KAAK2C,MAAMW,OAAOD,EAAWE,WFmGlDhB,IAAK,QACLd,MAAO,WExFR,MAAOzB,MAAKiB,UFuGXsB,IAAK,OACLd,MAAO,SE3FP+B,GAGD,MAFAxD,MAAK2C,MAAMc,QAAQD,GAEZxD,QF6GNuC,IAAK,SACLd,MAAO,SE9FL+B,GACH,MAAO,IAAIzD,GAAWC,KAAK2C,MAAMe,OAAOF,OF4GvCjB,IAAK,OACLd,MAAO,SEjGPkC,GACD,MAAO3D,MAAK2C,MAAMgB,MF4HjBpB,IAAK,QACLd,MAAO,WEpGW,GAAjB+B,GAAiBZ,UAAA3B,QAAA,GAAA4B,SAAAD,UAAA,GAAN,KAAMA,UAAA,EACnB,KAAM5C,KAAKkD,QACP,MAAO,KAGX,IAAIM,GAAiC,kBAAdA,GACnB,IAAK,GAAIzC,GAAI,EAAGA,EAAIf,KAAKkD,QAASnC,IAC9B,GAAIyC,EAASxD,KAAK2C,MAAM5B,IACpB,MAAOf,MAAK2C,MAAM5B,EAK9B,OAAOf,MAAK2C,MAAM,MFwHjBJ,IAAK,UACLd,MAAO,WEzGU,GAAAmC,GAAdC,IAAcjB,UAAA3B,QAAA,GAAA4B,SAAAD,UAAA,KAAAA,UAAA,GACZkB,EAAY,GAAI/D,IAAW6D,MAAGN,OAAHS,MAAAH,EAAAjD,EAAaX,KAAK2C,QAEnD,OAAIkB,IAAQC,EAAUP,MAAMS,KAAKnD,MAAMC,SAC5BgD,EAAUG,YAGdH,KFkINvB,IAAK,OACLd,MAAO,QAASyC,KE/GjB,GAAIA,KAQJ,OALIA,GADsB,WAAtBxC,EAAO1B,KAAK2C,OACLpB,OAAO2C,KAAKlE,KAAK2C,UAExBW,OAAA3C,EAAWX,KAAK2C,MAAMuB,SAGnB,GAAInE,GAAWmE,MF2IrB3B,IAAK,OACLd,MAAO,WEnHU,GAAjB+B,GAAiBZ,UAAA3B,QAAA,GAAA4B,SAAAD,UAAA,GAAN,KAAMA,UAAA,EAClB,OAAM5C,MAAKkD,QAIPM,GAAiC,kBAAdA,GACZxD,KAAK0D,OAAOF,GAAUW,OAG1BnE,KAAK2C,MAAM3C,KAAKkD,QAAU,GAPtB,QF6IVX,IAAK,MACLd,MAAO,SExHR+B,GACA,MAAO,IAAIzD,GAAWC,KAAK2C,MAAMyB,IAAIZ,OF0IpCjB,IAAK,QACLd,MAAO,SE3HNuB,GACF,MAAOhD,MAAKoE,IAAI,SAACtB,GAAD,MAAUA,GAAKE,QF2I9BT,IAAK,OACLd,MAAO,SEhIPqB,GACD,MAAO9C,MAAKqE,IAAIvB,MFkJfP,IAAK,SACLd,MAAO,SEnIL+B,EAAUc,GACb,MAAOtE,MAAK2C,MAAM4B,OAAOf,EAAUc,MFqJlC/B,IAAK,SACLd,MAAO,SEtIL+B,GACH,GAAMb,KAON,OANA3C,MAAK2C,MAAMc,QAAQ,SAACX,GACVU,EAASV,IACXH,EAAMI,KAAKD,KAIZ,GAAI/C,GAAW4C,MFmJrBJ,IAAK,UACLd,MAAO,WExIR,MAAO,IAAI1B,GAAWC,KAAK2C,MAAM6B,cFuJhCjC,IAAK,OACLd,MAAO,SE5IPyB,GACD,MAAOlD,MAAKoD,MAAMF,MF+JjBX,IAAK,QACLd,MAAO,SE/INgD,GAA0B,GAAnBC,GAAmB9B,UAAA3B,QAAA,GAAA4B,SAAAD,UAAA,GAAb5C,KAAKiB,OAAQ2B,UAAA,EAC5B,OAAO,IAAI7C,GAAWC,KAAK2C,MAAMS,MAAMqB,EAAOC,OFqK7CnC,IAAK,OACLd,MAAO,WEpJS,GAAhBkD,GAAgB/B,UAAA3B,QAAA,GAAA4B,SAAAD,UAAA,GAAN,KAAMA,UAAA,EACjB,OAAO,IAAI7C,GAAWC,KAAK2C,MAAMS,QAAQwB,KAAKD,OFgL7CpC,IAAK,SACLd,MAAO,SEzJLuB,GAAyB,GAAf6B,GAAejC,UAAA3B,QAAA,GAAA4B,SAAAD,UAAA,GAAP,MAAOA,UAAA,GACtBkC,EAAsC,QAAxBD,EAAME,aAE1B,OAAO/E,MAAK4E,KAAK,SAACI,EAAGC,GACjB,MAAID,GAAEhC,GAAYiC,EAAEjC,GACT8B,EAAc,KAGrBE,EAAEhC,GAAYiC,EAAEjC,GACT8B,KAAmB,EAGvB,OFyKVvC,IAAK,YACLd,MAAO,WE7JR,MAAOyD,MAAKC,UAAUnF,KAAK2C,UF4L1BJ,IAAK,MACLd,MAAO,WEjKS,GAAjBuB,GAAiBJ,UAAA3B,QAAA,GAAA4B,SAAAD,UAAA,GAAN,KAAMA,UAAA,EACjB,OAAwB,gBAAbI,GACAhD,KAAKuE,OAAO,SAACa,EAAUC,GAAX,MACfD,GAAWC,EAAQrC,IACrB,GAGkB,kBAAbA,GACAhD,KAAKuE,OAAO,SAACa,EAAUC,GAAX,MACfD,GAAWpC,EAASqC,IACtB,GAGCrF,KAAKuE,OAAO,SAACa,EAAUC,GAAX,MACfD,GAAWC,GACb,MFqLD9C,IAAK,OACLd,MAAO,SEtKPyB,GACD,MAAMA,GAIFA,EAAQ,EACD,GAAInD,GAAWC,KAAK2C,MAAM6B,WAAWc,MAAMpC,GAG/C,GAAInD,GAAWC,KAAK2C,MAAMS,MAAM,EAAGF,IAP/B,GAAInD,UF+LdwC,IAAK,SACLd,MAAO,WEzKH,GAAA8D,GAAAvF,IACL,OAAOA,MAAKkE,OAAOE,IAAI,SAAA7B,GAAA,MAAOgD,GAAK5C,MAAMJ,QFwMxCA,IAAK,QACLd,MAAO,SEhLN+B,GAAwB,GAAd/B,GAAcmB,UAAA3B,QAAA,GAAA4B,SAAAD,UAAA,GAAN,KAAMA,UAAA,EAC1B,OAAyB,gBAAdY,GACAxD,KAAK0D,OAAO,SAAAZ,GAAA,MAAQA,GAAKU,KAAc/B,IAG3CzB,KAAK0D,OAAOF,MFmMlBjB,IAAK,MACLd,MAAO,SEvLR+D,GACA,MAAIA,aAAiBzF,GACVC,KAAKoE,IAAI,SAACtB,EAAMa,GAAP,OAAkBb,EAAM0C,EAAMC,KAAK9B,MAGhD3D,KAAKoE,IAAI,SAACtB,EAAMa,GAAP,OAAkBb,EAAM0C,EAAM7B,WF8L7CpB,IAAK,UACLd,MAAO,SExtBGiE,GACX,GAAI/C,GAAQ+C,CAKZ,OAJ2B,gBAAhBA,KACP/C,EAAQ+C,EAAYC,MAAM,KAGvB,GAAI5F,GAAW4C,OF4tBlB5C,IAGXJ,cEz1BoBI,EF01BpBH,EAAOD,QAAUA,EAAQ","file":"collection.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Collection\"] = factory();\n\telse\n\t\troot[\"Collection\"] = factory();\n})(this, function() {\nreturn \n\n\n/** WEBPACK FOOTER **\n ** webpack/universalModuleDefinition\n **/","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Collection\"] = factory();\n\telse\n\t\troot[\"Collection\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t    value: true\n\t});\n\t\n\tvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\t/**\n\t * The Collection object.\n\t *\n\t * @example\n\t * let collection = new Collection([1, 2, 3]);\n\t */\n\t\n\tvar Collection = function () {\n\t    /**\n\t     * The collection constructor.\n\t     *\n\t     * @param  {Array} [items=[]] the array to collect.\n\t     * @return {Collection} A Collection object.\n\t     */\n\t\n\t    function Collection() {\n\t        var items = arguments.length <= 0 || arguments[0] === undefined ? [] : arguments[0];\n\t\n\t        _classCallCheck(this, Collection);\n\t\n\t        /**\n\t         * The internal array.\n\t         * @type {Array|Object}\n\t         */\n\t        this.items = items;\n\t\n\t        /**\n\t         * The length of the array.\n\t         * @type {Number}\n\t         */\n\t        this.length = items.length;\n\t    }\n\t\n\t    /**\n\t     * Adds an item to the collection.\n\t     *\n\t     * @param {var} item the item to be added.\n\t     * @return {Collection} the collection object.\n\t     * @example\n\t     * const collection = new Collection();\n\t     * collection.add('Arya');\n\t     * console.log(collection.first()); //outputs 'Arya'\n\t     */\n\t\n\t\n\t    _createClass(Collection, [{\n\t        key: 'add',\n\t        value: function add(item) {\n\t            this.items.push(item);\n\t            this.length = this.items.length;\n\t\n\t            return this;\n\t        }\n\t\n\t        /**\n\t         * Gets the collected elements in an array.\n\t         *\n\t         * @return {Array} the internal array.\n\t         * @example\n\t         * const collection = new Collection([1, 2, 3]);\n\t         * console.log(collection.all()); // [1, 2, 3]\n\t         */\n\t\n\t    }, {\n\t        key: 'all',\n\t        value: function all() {\n\t            return this.items;\n\t        }\n\t\n\t        /**\n\t         * Gets the average value of the array or a property or a callback return value.\n\t         * If no property is provided: it will calculate the average value of the array (Numeric array).\n\t         * If property is a string: it will calculate the average value of that property for all\n\t         *  objects in the array.\n\t         * If Property is a callback: the the averaging will use the value returned instead.\n\t         *\n\t         * @param  {Function|String} [property=null] The property name or the callback function.\n\t         * defaults to null.\n\t         * @return {Number} The average value.\n\t         * @example <caption>Averaging elements</caption>\n\t         * const collection = new Collection([1, 2, 3]);\n\t         * console.log(collection.average()); // 2\n\t         * @example <caption>Averaging a property</caption>\n\t         * const collection = new Collection([\n\t         *     { name: 'Arya Stark', age: 9 },\n\t         *     { name: 'Bran Stark', age: 7 },\n\t         *     { name: 'Jon Snow', age: 14 }\n\t         * ]);\n\t         * console.log(collection.average('age')); // 10\n\t         * @example <caption>Averaging using a callback</caption>\n\t         * const collection = new Collection([\n\t         *     { name: 'Arya Stark', age: 9 },\n\t         *     { name: 'Bran Stark', age: 7 },\n\t         *     { name: 'Jon Snow', age: 14 }\n\t         * ]);\n\t         * console.log(collection.average(i => i.age)); // 10\n\t         */\n\t\n\t    }, {\n\t        key: 'average',\n\t        value: function average() {\n\t            var property = arguments.length <= 0 || arguments[0] === undefined ? null : arguments[0];\n\t\n\t            return this.sum(property) / this.count();\n\t        }\n\t\n\t        /**\n\t         * Chunks the collection into a new collection with equal length arrays as its items.\n\t         *\n\t         * @param  {Number} size the size of each chunk.\n\t         * @return {Collection} the new collection.\n\t         * @example\n\t         * const collection = new Collection([1, 2, 3, 4, 5]).chunk(2);\n\t         * console.log(collection.all()); // [[1, 2], [3, 4], [5]]\n\t         */\n\t\n\t    }, {\n\t        key: 'chunk',\n\t        value: function chunk(size) {\n\t            if (size <= 0) {\n\t                return new Collection();\n\t            }\n\t\n\t            var items = [];\n\t\n\t            for (var i = 0; i < this.length; i += size) {\n\t                items.push(this.items.slice(i, i + size));\n\t            }\n\t\n\t            return new Collection(items);\n\t        }\n\t\n\t        /**\n\t         * Static constructor. Will transform a string to array of strings.\n\t         * cool if you don't like using the 'new' keyword.\n\t         *\n\t         * @param  {Array|String} collectable the array or the string to wrapped in a collection.\n\t         * @return {Collection} A collection that wraps the collectable items.\n\t         * @example\n\t         * const collection = Collection.collect('abcd');\n\t         * console.log(collection.all()); // ['a', 'b', 'c', 'd']\n\t         */\n\t\n\t    }, {\n\t        key: 'concat',\n\t\n\t\n\t        /**\n\t         * Concatnates the collection with an array or another collection.\n\t         *\n\t         * @param {Array|Collection} collection the array or the collection to be concatenated with.\n\t         * @return {Collection} concatenated collection.\n\t         * @example\n\t         * const collection = new Collection([1, 2, 3]);\n\t         * const array = [4, 5, 6]; // or another collection.\n\t         * const newCollection = collection.concat(array);\n\t         * console.log(newCollection.all()); // [1, 2, 3, 4, 5, 6]\n\t         */\n\t        value: function concat(collection) {\n\t            if (Array.isArray(collection)) {\n\t                return new Collection(this.items.concat(collection));\n\t            }\n\t\n\t            return new Collection(this.items.concat(collection.all()));\n\t        }\n\t\n\t        /**\n\t         * Gets the number of items in the collection.\n\t         *\n\t         * @return {Number} Number of items in the collection.\n\t         * @example\n\t         * const collection = new Collection([1, 2, 3]);\n\t         * console.log(collection.count()); // 3\n\t         */\n\t\n\t    }, {\n\t        key: 'count',\n\t        value: function count() {\n\t            return this.length;\n\t        }\n\t\n\t        /**\n\t         * Executes a callback for each element in the collection.\n\t         *\n\t         * @param  {Function} callback the callback to be excuted for each item.\n\t         * @return {Collection} The collection object.\n\t         * @example\n\t         * const collection = new Collection(['this', 'is', 'collectionjs']);\n\t         * collection.each(t => console.log(t)); // this is collectionjs\n\t         */\n\t\n\t    }, {\n\t        key: 'each',\n\t        value: function each(callback) {\n\t            this.items.forEach(callback);\n\t\n\t            return this;\n\t        }\n\t\n\t        /**\n\t         * Filters the collection using a predicate (callback that returns a boolean).\n\t         *\n\t         * @param  {Function} callback A function that returns a boolean expression.\n\t         * @return {Collection} Filtered collection.\n\t         * @example\n\t         * const collection = new Collection([\n\t         *     { name: 'Arya Stark', age: 9 },\n\t         *     { name: 'Bran Stark', age: 7 },\n\t         *     { name: 'Jon Snow', age: 14 }\n\t         * ]).filter(stark => stark.age === 14);\n\t         * console.log(collection.all()); // [{ name: 'Jon Snow', age: 14 }]\n\t         */\n\t\n\t    }, {\n\t        key: 'filter',\n\t        value: function filter(callback) {\n\t            return new Collection(this.items.filter(callback));\n\t        }\n\t\n\t        /**\n\t         * Gets an element at a specified index.\n\t         *\n\t         * @param  {Number} index the index of the item.\n\t         * @return {var} the item at that index.\n\t         * @example\n\t         * const collection = new Collection([1, 2, 3]);\n\t         * console.log(collection.find(2)); // 3\n\t         */\n\t\n\t    }, {\n\t        key: 'find',\n\t        value: function find(index) {\n\t            return this.items[index];\n\t        }\n\t\n\t        /**\n\t         * Gets the first element satisfying a critera.\n\t         *\n\t         * @param  {Function} [callback=null] the predicate (callback) that will be applied on items.\n\t         * @return {var} the first item to satisfy the critera.\n\t         * @example <caption>Using a callback</caption>\n\t         * const first = new Collection([\n\t         *     { name: 'Bran Stark', age: 7 },\n\t         *     { name: 'Arya Stark', age: 9 },\n\t         *     { name: 'Jon Snow', age: 14 }\n\t         * ]).first(item => item.age > 7);\n\t         *\n\t         * console.log(first); // { name: 'Arya Stark', age: 9 }\n\t         * @example <caption>No Arguments</caption>\n\t         * const first = new Collection([\n\t         *     { name: 'Bran Stark', age: 7 },\n\t         *     { name: 'Arya Stark', age: 9 },\n\t         *     { name: 'Jon Snow', age: 14 }\n\t         * ]).first();\n\t         *\n\t         * console.log(first); // { name: 'Bran Stark', age: 7 }\n\t         */\n\t\n\t    }, {\n\t        key: 'first',\n\t        value: function first() {\n\t            var callback = arguments.length <= 0 || arguments[0] === undefined ? null : arguments[0];\n\t\n\t            if (!this.count()) {\n\t                return null;\n\t            }\n\t\n\t            if (callback && typeof callback === 'function') {\n\t                for (var i = 0; i < this.count(); i++) {\n\t                    if (callback(this.items[i])) {\n\t                        return this.items[i];\n\t                    }\n\t                }\n\t            }\n\t\n\t            return this.items[0];\n\t        }\n\t\n\t        /**\n\t         * Flattens the collection elements.\n\t         *\n\t         * @param  {Boolean} [deep=false] recursively flatten the items (multi-level).\n\t         * @return {Collection} the flattened collection.\n\t         * @example <caption>Just one level</caption>\n\t         * const collection = new Collection([1, [2, [3, [4]], 5]]).flatten();\n\t         * console.log(collection.all()); // [1, 2, [3, [4]], 5]\n\t         *\n\t         * @example <caption>Deep</caption>\n\t         * const collection = new Collection([1, [2, [3, [4]], 5]]).flatten(true);\n\t         * console.log(collection.all()); // [1, 2, 3, 4, 5]\n\t         */\n\t\n\t    }, {\n\t        key: 'flatten',\n\t        value: function flatten() {\n\t            var _ref;\n\t\n\t            var deep = arguments.length <= 0 || arguments[0] === undefined ? false : arguments[0];\n\t\n\t            var flattened = new Collection((_ref = []).concat.apply(_ref, _toConsumableArray(this.items)));\n\t\n\t            if (deep && flattened.all().some(Array.isArray)) {\n\t                return flattened.flatten(true);\n\t            }\n\t\n\t            return flattened;\n\t        }\n\t\n\t        /**\n\t         * Gets the collection elements keys in a new collection.\n\t         *\n\t         * @return {Collection} The keys collection.\n\t         * @example <caption>Objects</caption>\n\t         * const keys = new Collection({\n\t         *     arya: 10,\n\t         *     john: 20,\n\t         *     potato: 30\n\t         * }).keys();\n\t         * console.log(keys); // ['arya', 'john', 'potato']\n\t         *\n\t         * @example <caption>Regular Array</caption>\n\t         * const keys = new Collection(['arya', 'john', 'potato']).keys();\n\t         * console.log(keys); // ['0', '1', '2']\n\t         */\n\t\n\t    }, {\n\t        key: 'keys',\n\t        value: function keys() {\n\t            var keys = [];\n\t\n\t            if (_typeof(this.items) === 'object') {\n\t                keys = Object.keys(this.items);\n\t            } else {\n\t                keys = [].concat(_toConsumableArray(this.items.keys()));\n\t            }\n\t\n\t            return new Collection(keys);\n\t        }\n\t\n\t        /**\n\t         * Gets the last element to satisfy a callback.\n\t         *\n\t         * @param  {Function} [callback=null] the predicate to be checked on all elements.\n\t         * @return {var} The last element in the collection that satisfies the predicate.\n\t         * @example <caption>Using a callback</caption>\n\t         * const last = new Collection([\n\t         *     { name: 'Bran Stark', age: 7 },\n\t         *     { name: 'Arya Stark', age: 9 },\n\t         *     { name: 'Jon Snow', age: 14 }\n\t         * ]).last(item => item.age > 7);\n\t         *\n\t         * console.log(last); // { name: 'Jon Snow', age: 14 }\n\t         * @example <caption>No Arguments</caption>\n\t         * const last = new Collection([\n\t         *     { name: 'Bran Stark', age: 7 },\n\t         *     { name: 'Arya Stark', age: 9 },\n\t         *     { name: 'Jon Snow', age: 14 }\n\t         * ]).last();\n\t         *\n\t         * console.log(last); // { name: 'Jon Snow', age: 14 }\n\t         */\n\t\n\t    }, {\n\t        key: 'last',\n\t        value: function last() {\n\t            var callback = arguments.length <= 0 || arguments[0] === undefined ? null : arguments[0];\n\t\n\t            if (!this.count()) {\n\t                return null;\n\t            }\n\t\n\t            if (callback && typeof callback === 'function') {\n\t                return this.filter(callback).last();\n\t            }\n\t\n\t            return this.items[this.count() - 1];\n\t        }\n\t\n\t        /**\n\t         * Maps each element using a mapping function and collects the mapped items.\n\t         * @param  {Function} callback the mapping function.\n\t         * @return {Collection} collection containing the mapped items.\n\t         * @example\n\t         * const collection = new Collection([\n\t         *     { name: 'Bran Stark', age: 7 },\n\t         *     { name: 'Arya Stark', age: 9 },\n\t         *     { name: 'Jon Snow', age: 14 }\n\t         * ]).map(stark => stark.name);\n\t         * console.log(collection.all()); ['Bran Stark', 'Arya Stark', 'Jon Snow']\n\t         */\n\t\n\t    }, {\n\t        key: 'map',\n\t        value: function map(callback) {\n\t            return new Collection(this.items.map(callback));\n\t        }\n\t\n\t        /**\n\t         * Extracts a property from the objects in the collection.\n\t         *\n\t         * @param  {String} property the name of the property to be extracted.\n\t         * @return {Collection} A collection with the extracted items.\n\t         * @example\n\t         * const collection = new Collection([\n\t         *     { name: 'Bran Stark', age: 7 },\n\t         *     { name: 'Arya Stark', age: 9 },\n\t         *     { name: 'Jon Snow', age: 14 }\n\t         * ]).pluck('name');\n\t         * console.log(collection.all()); ['Bran Stark', 'Arya Stark', 'Jon Snow']\n\t         */\n\t\n\t    }, {\n\t        key: 'pluck',\n\t        value: function pluck(property) {\n\t            return this.map(function (item) {\n\t                return item[property];\n\t            });\n\t        }\n\t\n\t        /**\n\t         * Adds an element to the collection.\n\t         *\n\t         * @param  {var} item the item to be added.\n\t         * @return {Collection} The collection object.\n\t         * @example\n\t         * const collection = new Collection().push('First');\n\t         * console.log(collection.first()); // \"First\"\n\t         */\n\t\n\t    }, {\n\t        key: 'push',\n\t        value: function push(item) {\n\t            return this.add(item);\n\t        }\n\t\n\t        /**\n\t         * Reduces the collection to a single value using a reducing function.\n\t         *\n\t         * @param  {Function} callback the reducing function.\n\t         * @param  {var} initial  initial value.\n\t         * @return {var} The reduced results.\n\t         * @example\n\t         * const value = new Collection([1, 2, 3]).reduce(\n\t         *     (previous, current) => previous + current,\n\t         *      0\n\t         *  );\n\t         *  console.log(value); // 6\n\t         */\n\t\n\t    }, {\n\t        key: 'reduce',\n\t        value: function reduce(callback, initial) {\n\t            return this.items.reduce(callback, initial);\n\t        }\n\t\n\t        /**\n\t         * Removes the elements that do not satisfy the predicate.\n\t         *\n\t         * @param  {Function} callback the predicate used on each item.\n\t         * @return {Collection} A collection without the rejected elements.\n\t         * @example\n\t         * const collection = new Collection([\n\t         *     { name: 'Arya Stark', age: 9 },\n\t         *     { name: 'Bran Stark', age: 7 },\n\t         *     { name: 'Jon Snow', age: 14 }\n\t         * ]).reject(stark => stark.age < 14);\n\t         * console.log(collection.all()); // [{ name: 'Jon Snow', age: 14 }]\n\t         */\n\t\n\t    }, {\n\t        key: 'reject',\n\t        value: function reject(callback) {\n\t            var items = [];\n\t            this.items.forEach(function (item) {\n\t                if (!callback(item)) {\n\t                    items.push(item);\n\t                }\n\t            });\n\t\n\t            return new Collection(items);\n\t        }\n\t\n\t        /**\n\t         * Reverses the collection order.\n\t         *\n\t         * @return {Collection} A new collection with the reversed order.\n\t         * @example\n\t         * const collection = new Collection(['one', 'two', 'three']).reverse();\n\t         * console.log(collection.all()); // ['three', 'two', 'one']\n\t         */\n\t\n\t    }, {\n\t        key: 'reverse',\n\t        value: function reverse() {\n\t            return new Collection(this.items.reverse());\n\t        }\n\t\n\t        /**\n\t         * Skips a specified number of elements.\n\t         *\n\t         * @param  {Number} count the number of items to be skipped.\n\t         * @return {Collection} A collection without the skipped items.\n\t         * @example\n\t         * const collection = new Collection(['John', 'Arya', 'Bran', 'Sansa']).skip(2);\n\t         * console.log(collection.all()); // ['Bran', 'Sansa']\n\t         */\n\t\n\t    }, {\n\t        key: 'skip',\n\t        value: function skip(count) {\n\t            return this.slice(count);\n\t        }\n\t\n\t        /**\n\t         * Slices the collection starting from a specific index and ending at a specified index.\n\t         *\n\t         * @param  {Number} start The zero-based starting index.\n\t         * @param  {Number} [end=length] The zero-based ending index.\n\t         * @return {Collection} A collection with the sliced items.\n\t         * @example <caption>start and end are specified</caption>\n\t         * const collection = new Collection([0, 1, 2, 3, 4, 5, 6]).slice(2, 4);\n\t         * console.log(collection.all()); // [2, 3]\n\t         *\n\t         * @example <caption>only start is specified</caption>\n\t         * const collection = new Collection([0, 1, 2, 3, 4, 5, 6]).slice(2);\n\t         * console.log(collection.all()); // [2, 3, 4, 5, 6]\n\t         */\n\t\n\t    }, {\n\t        key: 'slice',\n\t        value: function slice(start) {\n\t            var end = arguments.length <= 1 || arguments[1] === undefined ? this.length : arguments[1];\n\t\n\t            return new Collection(this.items.slice(start, end));\n\t        }\n\t\n\t        /**\n\t         * Sorts the elements of a collection and returns a new sorted collection.\n\t         * note that it doesn't change the orignal collection and it creates a\n\t         * shallow copy.\n\t         *\n\t         * @param  {Function} [compare=null] the compare function.\n\t         * @return {Collection} A new collection with the sorted items.\n\t         *\n\t         * @example\n\t         * const collection = new Collection([5, 3, 4, 1, 2]);\n\t         * const sorted = collection.sort();\n\t         * // original collection is intact.\n\t         * console.log(collection.all()); // [5, 3, 4, 1, 2]\n\t         * console.log(sorted.all()); // [1, 2, 3, 4, 5]\n\t         */\n\t\n\t    }, {\n\t        key: 'sort',\n\t        value: function sort() {\n\t            var compare = arguments.length <= 0 || arguments[0] === undefined ? null : arguments[0];\n\t\n\t            return new Collection(this.items.slice().sort(compare));\n\t        }\n\t\n\t        /**\n\t         * Sorts the collection by key value comaprison, given that the items are objects.\n\t         * It creates a shallow copy and retains the order of the orignal collection.\n\t         *\n\t         * @param  {string} property the key or the property to be compared.\n\t         * @param  {[type]} [order='asc'] The sorting order.\n\t         * use 'asc' for ascending or 'desc' for descending, case insensitive.\n\t         * @return {Collection} A new Collection with the sorted items.\n\t         *\n\t         * @example\n\t         * const collection = new Collection([\n\t         *     { name: 'Jon Snow', age: 14 },\n\t         *     { name: 'Arya Stark', age: 9 },\n\t         *     { name: 'Bran Stark', age: 7 },\n\t         * ]).sortBy('age');\n\t         * console.log(collection.all()); // [\n\t         * \t\t\t\t\t\t\t\t//\t \t{ name: 'Bran Stark', age: 7 },\n\t         *                              //      { name: 'Arya Stark', age: 9 },\n\t         *                              //      { name: 'Jon Snow', age: 14 }\n\t         *                              //   ]\n\t         */\n\t\n\t    }, {\n\t        key: 'sortBy',\n\t        value: function sortBy(property) {\n\t            var order = arguments.length <= 1 || arguments[1] === undefined ? 'asc' : arguments[1];\n\t\n\t            var isAscending = order.toLowerCase() === 'asc';\n\t\n\t            return this.sort(function (a, b) {\n\t                if (a[property] > b[property]) {\n\t                    return isAscending ? 1 : -1;\n\t                }\n\t\n\t                if (a[property] < b[property]) {\n\t                    return isAscending ? -1 : 1;\n\t                }\n\t\n\t                return 0;\n\t            });\n\t        }\n\t\n\t        /**\n\t         * Stringifies the collection using JSON.stringify API.\n\t         *\n\t         * @return {String} The stringified value.\n\t         * @example\n\t         * const collection = new Collection([1, 2, 3]);\n\t         * console.log(collection.stringify()); // \"[1,2,3]\"\n\t         */\n\t\n\t    }, {\n\t        key: 'stringify',\n\t        value: function stringify() {\n\t            return JSON.stringify(this.items);\n\t        }\n\t\n\t        /**\n\t         * Sums the values of the array, or the properties, or the result of the callback.\n\t         *\n\t         * @param  {undefined|String|Function} [property=null] the property to be summed.\n\t         * @return {var} The sum of values used in the summation.\n\t         * @example <caption>Summing elements</caption>\n\t         * const collection = new Collection([1, 2, 3]);\n\t         * console.log(collection.sum()); // 6\n\t         *\n\t         * @example <caption>Summing a property</caption>\n\t         * const collection = new Collection([\n\t         *     { name: 'Arya Stark', age: 9 },\n\t         *     { name: 'Bran Stark', age: 7 },\n\t         *     { name: 'Jon Snow', age: 14 }\n\t         * ]);\n\t         * console.log(collection.sum('age')); // 30\n\t         *\n\t         * @example <caption>Summing using a callback</caption>\n\t         * const collection = new Collection([\n\t         *     { name: 'Arya Stark', age: 9 },\n\t         *     { name: 'Bran Stark', age: 7 },\n\t         *     { name: 'Jon Snow', age: 14 }\n\t         * ]);\n\t         * console.log(collection.sum(i => i.age + 1)); // 33\n\t         */\n\t\n\t    }, {\n\t        key: 'sum',\n\t        value: function sum() {\n\t            var property = arguments.length <= 0 || arguments[0] === undefined ? null : arguments[0];\n\t\n\t            if (typeof property === 'string') {\n\t                return this.reduce(function (previous, current) {\n\t                    return previous + current[property];\n\t                }, 0);\n\t            }\n\t\n\t            if (typeof property === 'function') {\n\t                return this.reduce(function (previous, current) {\n\t                    return previous + property(current);\n\t                }, 0);\n\t            }\n\t\n\t            return this.reduce(function (previous, current) {\n\t                return previous + current;\n\t            }, 0);\n\t        }\n\t\n\t        /**\n\t         * Gets a new collection with the number of specified items from the begining or the end.\n\t         *\n\t         * @param  {Number} count the number of items to take. Takes from end if negative.\n\t         * @return {Collection} A collection with the taken items.\n\t         * @example <caption>From the beginning</caption>\n\t         * const collection = new Collection([1, 2, 3, 4, 5]).take(3);\n\t         * console.log(collection.all()); // [1, 2, 3]\n\t         *\n\t         * @example <caption>From the end</caption>\n\t         * const collection = new Collection([1, 2, 3, 4, 5]).take(-3);\n\t         * console.log(collection.all()); // [5, 4 ,3]\n\t         */\n\t\n\t    }, {\n\t        key: 'take',\n\t        value: function take(count) {\n\t            if (!count) {\n\t                return new Collection([]);\n\t            }\n\t\n\t            if (count < 0) {\n\t                return new Collection(this.items.reverse()).take(-count);\n\t            }\n\t\n\t            return new Collection(this.items.slice(0, count));\n\t        }\n\t\n\t        /**\n\t         * Gets the values without preserving the keys.\n\t         *\n\t         * @return {Collection} A Collection containing the values.\n\t         * @example\n\t         * const collection = new Collection({\n\t         *     1: 2,\n\t         *     2: 3,\n\t         *     4: 5\n\t         * }).values();\n\t         *\n\t         * console.log(collection.all()); / /[2, 3, 5]\n\t         */\n\t\n\t    }, {\n\t        key: 'values',\n\t        value: function values() {\n\t            var _this = this;\n\t\n\t            return this.keys().map(function (key) {\n\t                return _this.items[key];\n\t            });\n\t        }\n\t\n\t        /**\n\t         * Filters the collection using a callback or equality comparison to a property in each item.\n\t         *\n\t         * @param  {Function|String} callback The callback to be used to filter the collection.\n\t         * @param  {var} [value=null] The value to be compared.\n\t         * @return {Collection} A collection with the filtered items.\n\t         * @example <caption>Using a property name</caption>\n\t         * const collection = new Collection([\n\t         *     { name: 'Arya Stark', age: 9 },\n\t         *     { name: 'Bran Stark', age: 7 },\n\t         *     { name: 'Jon Snow', age: 14 }\n\t         * ]).where('age', 14);\n\t         * console.log(collection.all()); // [{ name: 'Jon Snow', age: 14 }]\n\t         *\n\t         * @example <caption>Using a callback</caption>\n\t         * const collection = new Collection([\n\t         *     { name: 'Arya Stark', age: 9 },\n\t         *     { name: 'Bran Stark', age: 7 },\n\t         *     { name: 'Jon Snow', age: 14 }\n\t         * ]).where(stark => stark.age === 14);\n\t         * console.log(collection.all()); // [{ name: 'Jon Snow', age: 14 }]\n\t         */\n\t\n\t    }, {\n\t        key: 'where',\n\t        value: function where(callback) {\n\t            var value = arguments.length <= 1 || arguments[1] === undefined ? null : arguments[1];\n\t\n\t            if (typeof callback === 'string') {\n\t                return this.filter(function (item) {\n\t                    return item[callback] === value;\n\t                });\n\t            }\n\t\n\t            return this.filter(callback);\n\t        }\n\t\n\t        /**\n\t         * Pairs each item in the collection with another array item in the same index.\n\t         *\n\t         * @param  {Array|Collection} array the array to be paired with.\n\t         * @return {Collection} A collection with the paired items.\n\t         * @example\n\t         * const array = ['a', 'b', 'c']; // or a collection.\n\t         * const collection = new Collection([1, 2, 3]).zip(array);\n\t         * console.log(collection.all()); // [[1, 'a'], [2, 'b'], [3, 'c']]\n\t         */\n\t\n\t    }, {\n\t        key: 'zip',\n\t        value: function zip(array) {\n\t            if (array instanceof Collection) {\n\t                return this.map(function (item, index) {\n\t                    return [item, array.find(index)];\n\t                });\n\t            }\n\t\n\t            return this.map(function (item, index) {\n\t                return [item, array[index]];\n\t            });\n\t        }\n\t    }], [{\n\t        key: 'collect',\n\t        value: function collect(collectable) {\n\t            var items = collectable;\n\t            if (typeof collectable === 'string') {\n\t                items = collectable.split('');\n\t            }\n\t\n\t            return new Collection(items);\n\t        }\n\t    }]);\n\t\n\t    return Collection;\n\t}();\n\t\n\texports.default = Collection;\n\tmodule.exports = exports['default'];\n\n/***/ }\n/******/ ])\n});\n;\n\n\n/** WEBPACK FOOTER **\n ** collection.min.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 8725d25858329d6be299\n **/","/**\n * The Collection object.\n *\n * @example\n * let collection = new Collection([1, 2, 3]);\n */\nexport default class Collection\n{\n    /**\n     * The collection constructor.\n     *\n     * @param  {Array} [items=[]] the array to collect.\n     * @return {Collection} A Collection object.\n     */\n    constructor(items = []) {\n        /**\n         * The internal array.\n         * @type {Array|Object}\n         */\n        this.items = items;\n\n        /**\n         * The length of the array.\n         * @type {Number}\n         */\n        this.length = items.length;\n    }\n\n    /**\n     * Adds an item to the collection.\n     *\n     * @param {var} item the item to be added.\n     * @return {Collection} the collection object.\n     * @example\n     * const collection = new Collection();\n     * collection.add('Arya');\n     * console.log(collection.first()); //outputs 'Arya'\n     */\n    add(item) {\n        this.items.push(item);\n        this.length = this.items.length;\n\n        return this;\n    }\n\n    /**\n     * Gets the collected elements in an array.\n     *\n     * @return {Array} the internal array.\n     * @example\n     * const collection = new Collection([1, 2, 3]);\n     * console.log(collection.all()); // [1, 2, 3]\n     */\n    all() {\n        return this.items;\n    }\n\n    /**\n     * Gets the average value of the array or a property or a callback return value.\n     * If no property is provided: it will calculate the average value of the array (Numeric array).\n     * If property is a string: it will calculate the average value of that property for all\n     *  objects in the array.\n     * If Property is a callback: the the averaging will use the value returned instead.\n     *\n     * @param  {Function|String} [property=null] The property name or the callback function.\n     * defaults to null.\n     * @return {Number} The average value.\n     * @example <caption>Averaging elements</caption>\n     * const collection = new Collection([1, 2, 3]);\n     * console.log(collection.average()); // 2\n     * @example <caption>Averaging a property</caption>\n     * const collection = new Collection([\n     *     { name: 'Arya Stark', age: 9 },\n     *     { name: 'Bran Stark', age: 7 },\n     *     { name: 'Jon Snow', age: 14 }\n     * ]);\n     * console.log(collection.average('age')); // 10\n     * @example <caption>Averaging using a callback</caption>\n     * const collection = new Collection([\n     *     { name: 'Arya Stark', age: 9 },\n     *     { name: 'Bran Stark', age: 7 },\n     *     { name: 'Jon Snow', age: 14 }\n     * ]);\n     * console.log(collection.average(i => i.age)); // 10\n     */\n    average(property = null) {\n        return this.sum(property) / this.count();\n    }\n\n    /**\n     * Chunks the collection into a new collection with equal length arrays as its items.\n     *\n     * @param  {Number} size the size of each chunk.\n     * @return {Collection} the new collection.\n     * @example\n     * const collection = new Collection([1, 2, 3, 4, 5]).chunk(2);\n     * console.log(collection.all()); // [[1, 2], [3, 4], [5]]\n     */\n    chunk(size) {\n        if (size <= 0) {\n            return new Collection();\n        }\n\n        const items = [];\n\n        for (let i = 0; i < this.length; i += size) {\n            items.push(this.items.slice(i, i + size));\n        }\n\n        return new Collection(items);\n    }\n\n    /**\n     * Static constructor. Will transform a string to array of strings.\n     * cool if you don't like using the 'new' keyword.\n     *\n     * @param  {Array|String} collectable the array or the string to wrapped in a collection.\n     * @return {Collection} A collection that wraps the collectable items.\n     * @example\n     * const collection = Collection.collect('abcd');\n     * console.log(collection.all()); // ['a', 'b', 'c', 'd']\n     */\n    static collect(collectable) {\n        let items = collectable;\n        if (typeof collectable === 'string') {\n            items = collectable.split('');\n        }\n\n        return new Collection(items);\n    }\n\n    /**\n     * Concatnates the collection with an array or another collection.\n     *\n     * @param {Array|Collection} collection the array or the collection to be concatenated with.\n     * @return {Collection} concatenated collection.\n     * @example\n     * const collection = new Collection([1, 2, 3]);\n     * const array = [4, 5, 6]; // or another collection.\n     * const newCollection = collection.concat(array);\n     * console.log(newCollection.all()); // [1, 2, 3, 4, 5, 6]\n     */\n    concat(collection) {\n        if (Array.isArray(collection)) {\n            return new Collection(this.items.concat(collection));\n        }\n\n        return new Collection(this.items.concat(collection.all()));\n    }\n\n    /**\n     * Gets the number of items in the collection.\n     *\n     * @return {Number} Number of items in the collection.\n     * @example\n     * const collection = new Collection([1, 2, 3]);\n     * console.log(collection.count()); // 3\n     */\n    count() {\n        return this.length;\n    }\n\n\n    /**\n     * Executes a callback for each element in the collection.\n     *\n     * @param  {Function} callback the callback to be excuted for each item.\n     * @return {Collection} The collection object.\n     * @example\n     * const collection = new Collection(['this', 'is', 'collectionjs']);\n     * collection.each(t => console.log(t)); // this is collectionjs\n     */\n    each(callback) {\n        this.items.forEach(callback);\n\n        return this;\n    }\n\n    /**\n     * Filters the collection using a predicate (callback that returns a boolean).\n     *\n     * @param  {Function} callback A function that returns a boolean expression.\n     * @return {Collection} Filtered collection.\n     * @example\n     * const collection = new Collection([\n     *     { name: 'Arya Stark', age: 9 },\n     *     { name: 'Bran Stark', age: 7 },\n     *     { name: 'Jon Snow', age: 14 }\n     * ]).filter(stark => stark.age === 14);\n     * console.log(collection.all()); // [{ name: 'Jon Snow', age: 14 }]\n     */\n    filter(callback) {\n        return new Collection(this.items.filter(callback));\n    }\n\n    /**\n     * Gets an element at a specified index.\n     *\n     * @param  {Number} index the index of the item.\n     * @return {var} the item at that index.\n     * @example\n     * const collection = new Collection([1, 2, 3]);\n     * console.log(collection.find(2)); // 3\n     */\n    find(index) {\n        return this.items[index];\n    }\n\n    /**\n     * Gets the first element satisfying a critera.\n     *\n     * @param  {Function} [callback=null] the predicate (callback) that will be applied on items.\n     * @return {var} the first item to satisfy the critera.\n     * @example <caption>Using a callback</caption>\n     * const first = new Collection([\n     *     { name: 'Bran Stark', age: 7 },\n     *     { name: 'Arya Stark', age: 9 },\n     *     { name: 'Jon Snow', age: 14 }\n     * ]).first(item => item.age > 7);\n     *\n     * console.log(first); // { name: 'Arya Stark', age: 9 }\n     * @example <caption>No Arguments</caption>\n     * const first = new Collection([\n     *     { name: 'Bran Stark', age: 7 },\n     *     { name: 'Arya Stark', age: 9 },\n     *     { name: 'Jon Snow', age: 14 }\n     * ]).first();\n     *\n     * console.log(first); // { name: 'Bran Stark', age: 7 }\n     */\n    first(callback = null) {\n        if (! this.count()) {\n            return null;\n        }\n\n        if (callback && typeof(callback) === 'function') {\n            for (let i = 0; i < this.count(); i++) {\n                if (callback(this.items[i])) {\n                    return this.items[i];\n                }\n            }\n        }\n\n        return this.items[0];\n    }\n\n    /**\n     * Flattens the collection elements.\n     *\n     * @param  {Boolean} [deep=false] recursively flatten the items (multi-level).\n     * @return {Collection} the flattened collection.\n     * @example <caption>Just one level</caption>\n     * const collection = new Collection([1, [2, [3, [4]], 5]]).flatten();\n     * console.log(collection.all()); // [1, 2, [3, [4]], 5]\n     *\n     * @example <caption>Deep</caption>\n     * const collection = new Collection([1, [2, [3, [4]], 5]]).flatten(true);\n     * console.log(collection.all()); // [1, 2, 3, 4, 5]\n     */\n    flatten(deep = false) {\n        const flattened = new Collection([].concat(...this.items));\n\n        if (deep && flattened.all().some(Array.isArray)) {\n            return flattened.flatten(true);\n        }\n\n        return flattened;\n    }\n\n    /**\n     * Gets the collection elements keys in a new collection.\n     *\n     * @return {Collection} The keys collection.\n     * @example <caption>Objects</caption>\n     * const keys = new Collection({\n     *     arya: 10,\n     *     john: 20,\n     *     potato: 30\n     * }).keys();\n     * console.log(keys); // ['arya', 'john', 'potato']\n     *\n     * @example <caption>Regular Array</caption>\n     * const keys = new Collection(['arya', 'john', 'potato']).keys();\n     * console.log(keys); // ['0', '1', '2']\n     */\n    keys() {\n        let keys = [];\n\n        if (typeof this.items === 'object') {\n            keys = Object.keys(this.items);\n        } else {\n            keys = [...this.items.keys()];\n        }\n\n        return new Collection(keys);\n    }\n\n    /**\n     * Gets the last element to satisfy a callback.\n     *\n     * @param  {Function} [callback=null] the predicate to be checked on all elements.\n     * @return {var} The last element in the collection that satisfies the predicate.\n     * @example <caption>Using a callback</caption>\n     * const last = new Collection([\n     *     { name: 'Bran Stark', age: 7 },\n     *     { name: 'Arya Stark', age: 9 },\n     *     { name: 'Jon Snow', age: 14 }\n     * ]).last(item => item.age > 7);\n     *\n     * console.log(last); // { name: 'Jon Snow', age: 14 }\n     * @example <caption>No Arguments</caption>\n     * const last = new Collection([\n     *     { name: 'Bran Stark', age: 7 },\n     *     { name: 'Arya Stark', age: 9 },\n     *     { name: 'Jon Snow', age: 14 }\n     * ]).last();\n     *\n     * console.log(last); // { name: 'Jon Snow', age: 14 }\n     */\n    last(callback = null) {\n        if (! this.count()) {\n            return null;\n        }\n\n        if (callback && typeof(callback) === 'function') {\n            return this.filter(callback).last();\n        }\n\n        return this.items[this.count() - 1];\n    }\n\n    /**\n     * Maps each element using a mapping function and collects the mapped items.\n     * @param  {Function} callback the mapping function.\n     * @return {Collection} collection containing the mapped items.\n     * @example\n     * const collection = new Collection([\n     *     { name: 'Bran Stark', age: 7 },\n     *     { name: 'Arya Stark', age: 9 },\n     *     { name: 'Jon Snow', age: 14 }\n     * ]).map(stark => stark.name);\n     * console.log(collection.all()); ['Bran Stark', 'Arya Stark', 'Jon Snow']\n     */\n    map(callback) {\n        return new Collection(this.items.map(callback));\n    }\n\n    /**\n     * Extracts a property from the objects in the collection.\n     *\n     * @param  {String} property the name of the property to be extracted.\n     * @return {Collection} A collection with the extracted items.\n     * @example\n     * const collection = new Collection([\n     *     { name: 'Bran Stark', age: 7 },\n     *     { name: 'Arya Stark', age: 9 },\n     *     { name: 'Jon Snow', age: 14 }\n     * ]).pluck('name');\n     * console.log(collection.all()); ['Bran Stark', 'Arya Stark', 'Jon Snow']\n     */\n    pluck(property) {\n        return this.map((item) => item[property]);\n    }\n\n    /**\n     * Adds an element to the collection.\n     *\n     * @param  {var} item the item to be added.\n     * @return {Collection} The collection object.\n     * @example\n     * const collection = new Collection().push('First');\n     * console.log(collection.first()); // \"First\"\n     */\n    push(item) {\n        return this.add(item);\n    }\n\n    /**\n     * Reduces the collection to a single value using a reducing function.\n     *\n     * @param  {Function} callback the reducing function.\n     * @param  {var} initial  initial value.\n     * @return {var} The reduced results.\n     * @example\n     * const value = new Collection([1, 2, 3]).reduce(\n     *     (previous, current) => previous + current,\n     *      0\n     *  );\n     *  console.log(value); // 6\n     */\n    reduce(callback, initial) {\n        return this.items.reduce(callback, initial);\n    }\n\n    /**\n     * Removes the elements that do not satisfy the predicate.\n     *\n     * @param  {Function} callback the predicate used on each item.\n     * @return {Collection} A collection without the rejected elements.\n     * @example\n     * const collection = new Collection([\n     *     { name: 'Arya Stark', age: 9 },\n     *     { name: 'Bran Stark', age: 7 },\n     *     { name: 'Jon Snow', age: 14 }\n     * ]).reject(stark => stark.age < 14);\n     * console.log(collection.all()); // [{ name: 'Jon Snow', age: 14 }]\n     */\n    reject(callback) {\n        const items = [];\n        this.items.forEach((item) => {\n            if (! callback(item)) {\n                items.push(item);\n            }\n        });\n\n        return new Collection(items);\n    }\n\n    /**\n     * Reverses the collection order.\n     *\n     * @return {Collection} A new collection with the reversed order.\n     * @example\n     * const collection = new Collection(['one', 'two', 'three']).reverse();\n     * console.log(collection.all()); // ['three', 'two', 'one']\n     */\n    reverse() {\n        return new Collection(this.items.reverse());\n    }\n\n    /**\n     * Skips a specified number of elements.\n     *\n     * @param  {Number} count the number of items to be skipped.\n     * @return {Collection} A collection without the skipped items.\n     * @example\n     * const collection = new Collection(['John', 'Arya', 'Bran', 'Sansa']).skip(2);\n     * console.log(collection.all()); // ['Bran', 'Sansa']\n     */\n    skip(count) {\n        return this.slice(count);\n    }\n\n    /**\n     * Slices the collection starting from a specific index and ending at a specified index.\n     *\n     * @param  {Number} start The zero-based starting index.\n     * @param  {Number} [end=length] The zero-based ending index.\n     * @return {Collection} A collection with the sliced items.\n     * @example <caption>start and end are specified</caption>\n     * const collection = new Collection([0, 1, 2, 3, 4, 5, 6]).slice(2, 4);\n     * console.log(collection.all()); // [2, 3]\n     *\n     * @example <caption>only start is specified</caption>\n     * const collection = new Collection([0, 1, 2, 3, 4, 5, 6]).slice(2);\n     * console.log(collection.all()); // [2, 3, 4, 5, 6]\n     */\n    slice(start, end = this.length) {\n        return new Collection(this.items.slice(start, end));\n    }\n\n    /**\n     * Sorts the elements of a collection and returns a new sorted collection.\n     * note that it doesn't change the orignal collection and it creates a\n     * shallow copy.\n     *\n     * @param  {Function} [compare=null] the compare function.\n     * @return {Collection} A new collection with the sorted items.\n     *\n     * @example\n     * const collection = new Collection([5, 3, 4, 1, 2]);\n     * const sorted = collection.sort();\n     * // original collection is intact.\n     * console.log(collection.all()); // [5, 3, 4, 1, 2]\n     * console.log(sorted.all()); // [1, 2, 3, 4, 5]\n     */\n    sort(compare = null) {\n        return new Collection(this.items.slice().sort(compare));\n    }\n\n    /**\n     * Sorts the collection by key value comaprison, given that the items are objects.\n     * It creates a shallow copy and retains the order of the orignal collection.\n     *\n     * @param  {string} property the key or the property to be compared.\n     * @param  {[type]} [order='asc'] The sorting order.\n     * use 'asc' for ascending or 'desc' for descending, case insensitive.\n     * @return {Collection} A new Collection with the sorted items.\n     *\n     * @example\n     * const collection = new Collection([\n     *     { name: 'Jon Snow', age: 14 },\n     *     { name: 'Arya Stark', age: 9 },\n     *     { name: 'Bran Stark', age: 7 },\n     * ]).sortBy('age');\n     * console.log(collection.all()); // [\n     * \t\t\t\t\t\t\t\t//\t \t{ name: 'Bran Stark', age: 7 },\n     *                              //      { name: 'Arya Stark', age: 9 },\n     *                              //      { name: 'Jon Snow', age: 14 }\n     *                              //   ]\n     */\n    sortBy(property, order = 'asc') {\n        const isAscending = order.toLowerCase() === 'asc';\n\n        return this.sort((a, b) => {\n            if (a[property] > b[property]) {\n                return isAscending ? 1 : -1;\n            }\n\n            if (a[property] < b[property]) {\n                return isAscending ? -1 : 1;\n            }\n\n            return 0;\n        });\n    }\n\n    /**\n     * Stringifies the collection using JSON.stringify API.\n     *\n     * @return {String} The stringified value.\n     * @example\n     * const collection = new Collection([1, 2, 3]);\n     * console.log(collection.stringify()); // \"[1,2,3]\"\n     */\n    stringify() {\n        return JSON.stringify(this.items);\n    }\n\n    /**\n     * Sums the values of the array, or the properties, or the result of the callback.\n     *\n     * @param  {undefined|String|Function} [property=null] the property to be summed.\n     * @return {var} The sum of values used in the summation.\n     * @example <caption>Summing elements</caption>\n     * const collection = new Collection([1, 2, 3]);\n     * console.log(collection.sum()); // 6\n     *\n     * @example <caption>Summing a property</caption>\n     * const collection = new Collection([\n     *     { name: 'Arya Stark', age: 9 },\n     *     { name: 'Bran Stark', age: 7 },\n     *     { name: 'Jon Snow', age: 14 }\n     * ]);\n     * console.log(collection.sum('age')); // 30\n     *\n     * @example <caption>Summing using a callback</caption>\n     * const collection = new Collection([\n     *     { name: 'Arya Stark', age: 9 },\n     *     { name: 'Bran Stark', age: 7 },\n     *     { name: 'Jon Snow', age: 14 }\n     * ]);\n     * console.log(collection.sum(i => i.age + 1)); // 33\n     */\n    sum(property = null) {\n        if (typeof property === 'string') {\n            return this.reduce((previous, current) =>\n                previous + current[property]\n            , 0);\n        }\n\n        if (typeof property === 'function') {\n            return this.reduce((previous, current) =>\n                previous + property(current)\n            , 0);\n        }\n\n        return this.reduce((previous, current) =>\n            previous + current\n        , 0);\n    }\n\n    /**\n     * Gets a new collection with the number of specified items from the begining or the end.\n     *\n     * @param  {Number} count the number of items to take. Takes from end if negative.\n     * @return {Collection} A collection with the taken items.\n     * @example <caption>From the beginning</caption>\n     * const collection = new Collection([1, 2, 3, 4, 5]).take(3);\n     * console.log(collection.all()); // [1, 2, 3]\n     *\n     * @example <caption>From the end</caption>\n     * const collection = new Collection([1, 2, 3, 4, 5]).take(-3);\n     * console.log(collection.all()); // [5, 4 ,3]\n     */\n    take(count) {\n        if (! count) {\n            return new Collection([]);\n        }\n\n        if (count < 0) {\n            return new Collection(this.items.reverse()).take(-count);\n        }\n\n        return new Collection(this.items.slice(0, count));\n    }\n\n    /**\n     * Gets the values without preserving the keys.\n     *\n     * @return {Collection} A Collection containing the values.\n     * @example\n     * const collection = new Collection({\n     *     1: 2,\n     *     2: 3,\n     *     4: 5\n     * }).values();\n     *\n     * console.log(collection.all()); / /[2, 3, 5]\n     */\n    values() {\n        return this.keys().map(key => this.items[key]);\n    }\n\n    /**\n     * Filters the collection using a callback or equality comparison to a property in each item.\n     *\n     * @param  {Function|String} callback The callback to be used to filter the collection.\n     * @param  {var} [value=null] The value to be compared.\n     * @return {Collection} A collection with the filtered items.\n     * @example <caption>Using a property name</caption>\n     * const collection = new Collection([\n     *     { name: 'Arya Stark', age: 9 },\n     *     { name: 'Bran Stark', age: 7 },\n     *     { name: 'Jon Snow', age: 14 }\n     * ]).where('age', 14);\n     * console.log(collection.all()); // [{ name: 'Jon Snow', age: 14 }]\n     *\n     * @example <caption>Using a callback</caption>\n     * const collection = new Collection([\n     *     { name: 'Arya Stark', age: 9 },\n     *     { name: 'Bran Stark', age: 7 },\n     *     { name: 'Jon Snow', age: 14 }\n     * ]).where(stark => stark.age === 14);\n     * console.log(collection.all()); // [{ name: 'Jon Snow', age: 14 }]\n     */\n    where(callback, value = null) {\n        if (typeof(callback) === 'string') {\n            return this.filter(item => item[callback] === value);\n        }\n\n        return this.filter(callback);\n    }\n\n    /**\n     * Pairs each item in the collection with another array item in the same index.\n     *\n     * @param  {Array|Collection} array the array to be paired with.\n     * @return {Collection} A collection with the paired items.\n     * @example\n     * const array = ['a', 'b', 'c']; // or a collection.\n     * const collection = new Collection([1, 2, 3]).zip(array);\n     * console.log(collection.all()); // [[1, 'a'], [2, 'b'], [3, 'c']]\n     */\n    zip(array) {\n        if (array instanceof Collection) {\n            return this.map((item, index) => [item, array.find(index)]);\n        }\n\n        return this.map((item, index) => [item, array[index]]);\n    }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/collection.js\n **/"],"sourceRoot":""}